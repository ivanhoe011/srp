<?php
/**
 * SRP
 *
 * SRP INELECTRA
 *
 * @category   lib
 * @package    lib_models
 * @copyright  Copyright (c) 2010 PCSMEXICO
 * @author     <arturo>, $LastChangedBy$
 * @version    1.0.2 SVN: $Id$
 */


require_once "lib/utils/Parser.php";

/**
 * Clase TimetableCollection que representa una collección de objetos Timetable
 *
 * @category   lib
 * @package    lib_models
 * @subpackage lib_models_collections
 * @copyright  Copyright (c) 2010 PCSMEXICO
 * @copyright  This File has been proudly generated by Bender (http://code.google.com/p/bender-modeler/). <chentepixtol> <zetta>
 * @author     zetta & chentepixtol
 * @version    1.0.2 SVN: $Revision$
 */
class TimetableCollection extends ArrayIterator
{

    /**
     * @var Parser
     */
    private $parser;

    /**
     * Constructor
     * @param array $array
     * @return void
     */
    public function __construct($array = array())
    {
        $this->parser = new Parser('Timetable');
        parent::__construct($array);
    }

    /**
     * Appends the value
     * @param Timetable $timetable
     */
    public function append($timetable)
    {
        parent::offsetSet($timetable->getIdTimetable(), $timetable);
        $this->rewind();
    }

    /**
     * Return current array entry
     * @return Timetable
     */
    public function current()
    {
        return parent::current();
    }

    /**
     * Return current array entry and
     * move to next entry
     * @return Timetable
     */
    public function read()
    {
        $timetable = $this->current();
        $this->next();
        return $timetable;
    }

    /**
     * Get the first array entry
     * if exists or null if not
     * @return Timetable|null
     */
    public function getOne()
    {
        if ($this->count() > 0)
        {
            $this->seek(0);
            return $this->current();
        } else
            return null;
    }

    /**
     * Contains one object with $idTimetable
     * @param  int $idTimetable
     * @return boolean
     */
    public function contains($idTimetable)
    {
        return parent::offsetExists($idTimetable);
    }

    /**
     * Remove one object with $idTimetable
     * @param  int $idTimetable
     */
    public function remove($idTimetable)
    {
        if( $this->contains($idTimetable) )
            $this->offsetUnset($idTimetable);
    }

    /**
     * Merge two Collections
     * @param TimetableCollection $timetableCollection
     * @return void
     */
    public function merge(TimetableCollection $timetableCollection)
    {
        $timetableCollection->rewind();
        while($timetableCollection->valid())
        {
            $timetable = $timetableCollection->read();
            if( !$this->contains( $timetable->getIdTimetable() ) )
                $this->append($timetable);
        }
        $timetableCollection->rewind();
    }

    /**
     * Diff two Collections
     * @param TimetableCollection $timetableCollection
     * @return void
     */
    public function diff(TimetableCollection $timetableCollection)
    {
        $timetableCollection->rewind();
        while($timetableCollection->valid())
        {
            $timetable = $timetableCollection->read();
            if( $this->contains( $timetable->getIdTimetable() ) )
                $this->remove($timetable->getIdTimetable());
        }
        $timetableCollection->rewind();
    }

    /**
     * Intersect two Collections
     * @param TimetableCollection $timetableCollection
     * @return TimetableCollection
     */
    public function intersect(TimetableCollection $timetableCollection)
    {
        $newtimetableCollection = TimetableCollection();
        $timetableCollection->rewind();
        while($timetableCollection->valid())
        {
            $timetable = $timetableCollection->read();
            if( $this->contains( $timetable->getIdTimetable() ) )
                $newtimetableCollection->append($timetable);
        }
        $timetableCollection->rewind();
        return $newtimetableCollection;
    }

    /**
     * Retrieve the array with primary keys
     * @return array
     */
    public function getPrimaryKeys()
    {
        return array_keys($this->getArrayCopy());
    }

    /**
     * Retrieve the Timetable with primary key
     * @param  int $idTimetable
     * @return Timetable
     */
    public function getByPK($idTimetable)
    {
        return $this->contains($idTimetable) ? $this[$idTimetable] : null;
    }

    /**
     * Transforma una collection a un array
     * @return array
     */
    public function toArray()
    {
        $array = array();
        while ($this->valid())
        {
            $timetable = $this->read();
            $this->parser->changeBean($timetable);
            $array[$timetable->getIdTimetable()] = $this->parser->toArray();
        }
        $this->rewind();
        return $array;
    }

    /**
     * Crea un array asociativo de $key => $value a partir de las constantes de un bean
     * @param string $ckey
     * @param string $cvalue
     * @return array
     */
    public function toKeyValueArray($ckey, $cvalue)
    {
        $array = array();
        while ($this->valid())
        {
            $timetable = $this->read();
            $this->parser->changeBean($timetable);
            $array += $this->parser->toKeyValueArray($ckey, $cvalue);
        }
        $this->rewind();
        return $array;
    }

    /**
     * Retrieve the parser object
     * @return Parser
     */
    public function getParser()
    {
        return $this->parser;
    }

    /**
     * Is Empty
     * @return boolean
     */
    public function isEmpty()
    {
        return $this->count() == 0;
    }


}
