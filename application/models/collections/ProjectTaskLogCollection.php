<?php
/**
 * SRP
 *
 * SRP INELECTRA
 *
 * @category   lib
 * @package    lib_models
 * @copyright  Copyright (c) 2010 PCSMEXICO
 * @author     <arturo>, $LastChangedBy$
 * @version    1.0.2 SVN: $Id$
 */


require_once "lib/utils/Parser.php";

/**
 * Clase ProjectTaskLogCollection que representa una collección de objetos ProjectTaskLog
 *
 * @category   lib
 * @package    lib_models
 * @subpackage lib_models_collections
 * @copyright  Copyright (c) 2010 PCSMEXICO
 * @copyright  This File has been proudly generated by Bender (http://code.google.com/p/bender-modeler/). <chentepixtol> <zetta>
 * @author     zetta & chentepixtol
 * @version    1.0.2 SVN: $Revision$
 */
class ProjectTaskLogCollection extends ArrayIterator
{

    /**
     * @var Parser
     */
    private $parser;
    
    /**
     * Constructor
     * @param array $array
     * @return void
     */
    public function __construct($array = array())
    {
        $this->parser = new Parser('ProjectTaskLog');
        parent::__construct($array);
    }

    /**
     * Appends the value
     * @param ProjectTaskLog $projectTaskLog
     */
    public function append($projectTaskLog)
    {
        parent::offsetSet($projectTaskLog->getIdProjectTaskLog(), $projectTaskLog);
        $this->rewind();
    }

    /**
     * Return current array entry
     * @return ProjectTaskLog
     */
    public function current()
    {
        return parent::current();
    }

    /**
     * Return current array entry and 
     * move to next entry
     * @return ProjectTaskLog 
     */
    public function read()
    {
        $projectTaskLog = $this->current();
        $this->next();
        return $projectTaskLog;
    }

    /**
     * Get the first array entry
     * if exists or null if not 
     * @return ProjectTaskLog|null 
     */
    public function getOne()
    {
        if ($this->count() > 0)
        {
            $this->seek(0);
            return $this->current();
        } else
            return null;
    }
    
    /**
     * Contains one object with $idProjectTaskLog
     * @param  int $idProjectTaskLog
     * @return boolean
     */
    public function contains($idProjectTaskLog)
    {
        return parent::offsetExists($idProjectTaskLog);
    }
    
    /**
     * Remove one object with $idProjectTaskLog
     * @param  int $idProjectTaskLog
     */
    public function remove($idProjectTaskLog)
    {
        if( $this->contains($idProjectTaskLog) )
            $this->offsetUnset($idProjectTaskLog);
    }
    
    /**
     * Merge two Collections
     * @param ProjectTaskLogCollection $projectTaskLogCollection
     * @return void
     */
    public function merge(ProjectTaskLogCollection $projectTaskLogCollection)
    {
        $projectTaskLogCollection->rewind();
        while($projectTaskLogCollection->valid())
        {
            $projectTaskLog = $projectTaskLogCollection->read();
            if( !$this->contains( $projectTaskLog->getIdProjectTaskLog() ) )
                $this->append($projectTaskLog);
        }
        $projectTaskLogCollection->rewind();
    }
    
    /**
     * Diff two Collections
     * @param ProjectTaskLogCollection $projectTaskLogCollection
     * @return void
     */
    public function diff(ProjectTaskLogCollection $projectTaskLogCollection)
    {
        $projectTaskLogCollection->rewind();
        while($projectTaskLogCollection->valid())
        {
            $projectTaskLog = $projectTaskLogCollection->read();
            if( $this->contains( $projectTaskLog->getIdProjectTaskLog() ) )
                $this->remove($projectTaskLog->getIdProjectTaskLog());     
        }
        $projectTaskLogCollection->rewind();
    }
    
    /**
     * Intersect two Collections
     * @param ProjectTaskLogCollection $projectTaskLogCollection
     * @return ProjectTaskLogCollection
     */
    public function intersect(ProjectTaskLogCollection $projectTaskLogCollection)
    {
        $newprojectTaskLogCollection = ProjectTaskLogCollection();
        $projectTaskLogCollection->rewind();
        while($projectTaskLogCollection->valid())
        {
            $projectTaskLog = $projectTaskLogCollection->read();
            if( $this->contains( $projectTaskLog->getIdProjectTaskLog() ) )
                $newprojectTaskLogCollection->append($projectTaskLog);
        }
        $projectTaskLogCollection->rewind();
        return $newprojectTaskLogCollection;
    }
    
    /**
     * Retrieve the array with primary keys 
     * @return array
     */
    public function getPrimaryKeys()
    {
        return array_keys($this->getArrayCopy());
    }
    
    /**
     * Retrieve the ProjectTaskLog with primary key  
     * @param  int $idProjectTaskLog
     * @return ProjectTaskLog
     */
    public function getByPK($idProjectTaskLog)
    {
        return $this->contains($idProjectTaskLog) ? $this[$idProjectTaskLog] : null;
    }
  
    /**
     * Transforma una collection a un array
     * @return array
     */
    public function toArray()
    {
        $array = array();
        while ($this->valid())
        {
            $projectTaskLog = $this->read();
            $this->parser->changeBean($projectTaskLog);
            $array[$projectTaskLog->getIdProjectTaskLog()] = $this->parser->toArray();
        }
        $this->rewind();
        return $array;
    }
    
    /**
     * Crea un array asociativo de $key => $value a partir de las constantes de un bean
     * @param string $ckey
     * @param string $cvalue
     * @return array
     */
    public function toKeyValueArray($ckey, $cvalue)
    {
        $array = array();
        while ($this->valid())
        {
            $projectTaskLog = $this->read();
            $this->parser->changeBean($projectTaskLog);
            $array += $this->parser->toKeyValueArray($ckey, $cvalue);
        }
        $this->rewind();
        return $array;
    }
    
    /**
     * Retrieve the parser object
     * @return Parser
     */
    public function getParser()
    {
        return $this->parser;
    }
    
    /**
     * Is Empty
     * @return boolean
     */
    public function isEmpty()
    {
        return $this->count() == 0;
    }
  
  
}

