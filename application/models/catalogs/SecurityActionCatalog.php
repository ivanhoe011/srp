<?php
/**
 * Bender Modeler
 *
 * Our Simple Models
 *
 * @category   lib
 * @package    lib_models
 * @copyright  Copyright (c) 2008-2010 Bender Modeler (http://www.ctrl-zetta.com/#code)
 * @author     <zetta> <chentepixtol>, $LastChangedBy$
 * @version    1.0.0 SVN: $Id$
 */

/**
 * Dependences
 */
require_once "lib/db/Catalog.php";
require_once "application/models/beans/SecurityAction.php";
require_once "application/models/exceptions/SecurityActionException.php";
require_once "application/models/collections/SecurityActionCollection.php";
require_once "application/models/factories/SecurityActionFactory.php";

/**
 * Singleton SecurityActionCatalog Class
 *
 * @category   lib
 * @package    lib_models
 * @subpackage lib_models_catalogs
 * @copyright  Copyright (c) 2008-2010 Bender Modeler (http://www.ctrl-zetta.com/#code)
 * @copyright  This File as been proudly generated by Bender (http://code.google.com/p/bender-modeler/). <chentepixtol> <zetta>
 * @author     zetta & chentepixtol
 * @version    1.0.0 SVN: $Revision$
 */
class SecurityActionCatalog extends Catalog
{

    /**
     * Singleton Instance
     * @var SecurityActionCatalog
     */
    static protected $instance = null;


    /**
     * Método para obtener la instancia del catálogo
     * @return SecurityActionCatalog
     */
    public static function getInstance()
    {
        if (!isset(self::$instance))
        {
          self::$instance = new self();
        }
        return self::$instance;
    }
    
    /**
     * Constructor de la clase SecurityActionCatalog
     * @return SecurityActionCatalog
     */
    protected function SecurityActionCatalog()
    {
        parent::Catalog();
    }

    /**
     * Metodo para agregar un SecurityAction a la base de datos
     * @param SecurityAction $securityAction Objeto SecurityAction
     */
    public function create($securityAction)
    {
        if(!($securityAction instanceof SecurityAction))
            throw new SecurityActionException("passed parameter isn't a SecurityAction instance");
        try
        {
            $data = array(
                'id_controller' => $securityAction->getIdController(),
                'name' => $securityAction->getName(),
            );
            $data = array_filter($data, 'Catalog::notNull');
            $this->db->insert(SecurityAction::TABLENAME, $data);
            $securityAction->setIdAction($this->db->lastInsertId());
        }
        catch(Exception $e)
        {
            throw new SecurityActionException("The SecurityAction can't be saved \n" . $e->getMessage());
        }
    }

    /**
     * Metodo para Obtener los datos de un objeto por su llave primaria
     * @param int $idAction
     * @return SecurityAction|null
     */
    public function getById($idAction)
    {
        try
        {
            $criteria = new Criteria();
            $criteria->add(SecurityAction::ID_ACTION, $idAction, Criteria::EQUAL);
            $newSecurityAction = $this->getByCriteria($criteria)->getOne();
        }
        catch(Exception $e)
        {
            throw new SecurityActionException("Can't obtain the SecurityAction \n" . $e->getMessage());
        }
        return $newSecurityAction;
    }
    
    /**
     * Metodo para Obtener una colección de objetos por varios ids
     * @param array $ids
     * @return SecurityActionCollection
     */
    public function getByIds(array $ids)
    {
        if(null == $ids) return new SecurityActionCollection();
        try
        {
            $criteria = new Criteria();
            $criteria->add(SecurityAction::ID_ACTION, $ids, Criteria::IN);
            $securityActionCollection = $this->getByCriteria($criteria);
        }
        catch(Exception $e)
        {
            throw new SecurityActionException("SecurityActionCollection can't be populated\n" . $e->getMessage());
        }
        return $securityActionCollection;
    }

    /**
     * Metodo para Obtener todos los ids en un arreglo
     * @return array
     */
    public function retrieveAllIds()
    {
        try
        {
            $result = $this->db->fetchCol('SELECT id_action FROM '.SecurityAction::TABLENAME);
        }
        catch(Exception $e)
        {
            throw new SecurityActionException("Can't obtain the ids\n" . $e->getMessage());
        }
        return $result;
    }

    /**
     * Metodo para actualizar un SecurityAction
     * @param SecurityAction $securityAction 
     */
    public function update($securityAction)
    {
        if(!($securityAction instanceof SecurityAction))
            throw new SecurityActionException("passed parameter isn't a SecurityAction instance");
        try
        {
            $where[] = "id_action = '{$securityAction->getIdAction()}'";
            $data = array(
                'id_controller' => $securityAction->getIdController(),
                'name' => $securityAction->getName(),
            );
            $data = array_filter($data, 'Catalog::notNull');
            $this->db->update(SecurityAction::TABLENAME, $data, $where);
        }
        catch(Exception $e)
        {
            throw new SecurityActionException("The SecurityAction can't be updated \n" . $e->getMessage());
        }
    }
    
    /**
     * Metodo para guardar un securityAction
     * @param SecurityAction $securityAction
     */	
    public function save($securityAction)
    {
        if(!($securityAction instanceof SecurityAction))
            throw new SecurityActionException("passed parameter isn't a SecurityAction instance");
        if(null != $securityAction->getIdAction())
            $this->update($securityAction);
        else
            $this->create($securityAction);
    }

    /**
     * Metodo para eliminar un securityAction
     * @param SecurityAction $securityAction
     */
    public function delete($securityAction)
    {
        if(!($securityAction instanceof SecurityAction))
            throw new SecurityActionException("passed parameter isn't a SecurityAction instance");
        $this->deleteById($securityAction->getIdAction());
    }

    /**
     * Metodo para eliminar un SecurityAction a partir de su Id
     * @param int $idAction
     */
    public function deleteById($idAction)
    {
        try
        {
            $where = array($this->db->quoteInto('id_action = ?', $idAction));
            $this->db->delete(SecurityAction::TABLENAME, $where);
        }
        catch(Exception $e)
        {
            throw new SecurityActionException("The SecurityAction can't be deleted\n" . $e->getMessage());
        }
    }
    
    /**
     * Metodo para eliminar varios SecurityAction a partir de su Id
     * @param array $ids
     */
    public function deleteByIds(array $ids)
    {
        try
        {
            $criteria = new Criteria();
            $criteria->add(SecurityAction::ID_ACTION, $ids, Criteria::IN);
            $this->db->delete(SecurityAction::TABLENAME, array($criteria->createSql()));
        }
        catch(Exception $e)
        {
            throw new SecurityActionException("Can't delete that\n" . $e->getMessage());
        }
    }

    /**
     * Metodo para obtener todos los id de SecurityAction por criterio
     * @param Criteria $criteria
     * @return array Array con todos los id de SecurityAction que encajen en la busqueda
     */
    public function getIdsByCriteria(Criteria $criteria = null)
    {
        $criteria = (null === $criteria) ? new Criteria() : $criteria;
        try
        {
            $sql = "SELECT id_action
                    FROM ".SecurityAction::TABLENAME."
                    WHERE  " . $criteria->createSql();
            $ids = $this->db->fetchCol($sql);
        } catch(Exception $e)
        {
            throw new SecurityActionException("Can't obtain SecurityAction's id\n" . $e->getMessage());
        }
        return $ids;
    }

    /**
     * Metodo para obtener un campo en particular de un SecurityAction dado un criterio
     * @param string $field
     * @param Criteria $criteria
     * @return array Array con el campo de los objetos SecurityAction que encajen en la busqueda
     */
    public function getCustomFieldByCriteria($field, Criteria $criteria = null)
    { 
        $criteria = (null === $criteria) ? new Criteria() : $criteria;
        try
        {
            $sql = "SELECT {$field}
                    FROM ".SecurityAction::TABLENAME."
                    WHERE  " . $criteria->createSql();
            $result = $this->db->fetchCol($sql);
        } catch(Zend_Db_Exception $e)
        {
            throw new SecurityActionException("No se pudieron obtener los ids de objetos {$Bean}\n" . $e->getMessage());
        }
        return $result;
    }

    /**
     * Metodo que regresa una coleccion de objetos SecurityAction 
     * dependiendo del criterio establecido
     * @param Criteria $criteria
     * @return SecurityActionCollection $securityActionCollection
     */
    public function getByCriteria(Criteria $criteria = null)
    {
        $criteria = (null === $criteria) ? new Criteria() : $criteria;
        $this->db->setFetchMode(Zend_Db::FETCH_ASSOC);
        try 
        {
            $sql = "SELECT * FROM ".SecurityAction::TABLENAME."
                    WHERE " . $criteria->createSql();
            $securityActionCollection = new SecurityActionCollection();
            foreach ($this->db->fetchAll($sql) as $result){
                $securityActionCollection->append($this->getSecurityActionInstance($result));
            }
        }
        catch(Zend_Db_Exception $e)
        {
            throw new SecurityActionException("Cant obtain SecurityActionCollection\n" . $e->getMessage());
        }
        return $securityActionCollection;
    }
    
    /**
     * Metodo que cuenta SecurityAction 
     * dependiendo del criterio establecido
     * @param Criteria $criteria
     * @param string $field
     * @return int $count
     */
    public function countByCriteria(Criteria $criteria = null, $field = 'id_action')
    {
        $criteria = (null === $criteria) ? new Criteria() : $criteria;
        try 
        {
            $sql = "SELECT COUNT( $field ) FROM ".SecurityAction::TABLENAME."
                    WHERE " . $criteria->createSql();   
            $count = $this->db->fetchOne($sql);
        }
        catch(Zend_Db_Exception $e)
        {
            throw new SecurityActionException("Cant obtain the count \n" . $e->getMessage());
        }
        return $count;
    }
    
    /**
     * Método que construye un objeto SecurityAction y lo rellena con la información del rowset
     * @param array $result El arreglo que devolvió el objeto Zend_Db despues del fetch
     * @return SecurityAction 
     */
    private function getSecurityActionInstance($result)
    {
        return SecurityActionFactory::createFromArray($result);
    }
  
    /**
     * Obtiene un SecurityActionCollection  dependiendo del idController
     * @param int $idController  
     * @return SecurityActionCollection 
     */
    public function getByIdController($idController)
    {
        $criteria = new Criteria();
        $criteria->add(SecurityAction::ID_CONTROLLER, $idController, Criteria::EQUAL);
        $securityActionCollection = $this->getByCriteria($criteria);
        return $securityActionCollection;
    }
    
	/**
	 * Link a SecurityAction to AccessRole
	 * @param int $idSecurityAction
	 * @param int $idAccessRole
	 */
	public function linkToAccessRole($idSecurityAction, $idAccessRole)
	{
	    try
	    {
	        $this->unlinkFromAccessRole($idSecurityAction, $idAccessRole);
	        $data = array(
	            'id_security_action' => $idSecurityAction,
	            'id_access_role' => $idAccessRole,
	        );
	        $this->db->insert(SecurityAction::TABLENAME_SECURITY_ACTION_ACCESS_ROLE, $data);
	    }
	    catch(Exception $e)
	    {
	        throw new SecurityActionException("The SecurityAction can't be saved \n" . $e->getMessage());
	    }
	}
	
	/**
	 * Unlink a SecurityAction from AccessRole
	 * @param int $idSecurityAction
	 * @param int $idAccessRole
	 */
	public function unlinkFromAccessRole($idSecurityAction, $idAccessRole)
	{
	    try
	    {
	        $where = array(
	            $this->db->quoteInto('id_security_action = ?', $idSecurityAction),
	            $this->db->quoteInto('id_access_role = ?', $idAccessRole),
	        );
	        $this->db->delete(SecurityAction::TABLENAME_SECURITY_ACTION_ACCESS_ROLE, $where);
	    }
	    catch(Exception $e)
	    {
	        throw new SecurityActionException("The SecurityAction can't be erased \n" . $e->getMessage());
	    }
	}
	
	/**
	 * Unlink all AccessRole relations
	 * @param int $idSecurityAction
	 */
	public function unlinkAllAccessRole($idSecurityAction)
	{
	    try
	    {
	        $where = array(
	            $this->db->quoteInto('id_security_action = ?', $idSecurityAction),
	        );
	        $this->db->delete(SecurityAction::TABLENAME_SECURITY_ACTION_ACCESS_ROLE, $where);
	    }
	    catch(Exception $e)
	    {
	        throw new SecurityActionException("The SecurityAction can't be erased \n" . $e->getMessage());
	    }
	}
	
	/**
	 * Get SecurityAction - AccessRole relations by Criteria
	 * @param Criteria $criteria
	 * @return array 
	 */
	public function getSecurityActionAccessRole(Criteria $criteria = null)
	{ 
	    $criteria = (null === $criteria) ? new Criteria() : $criteria;
	    $this->db->setFetchMode(Zend_Db::FETCH_ASSOC);
	    try
	    {
	       $sql = "SELECT * FROM ". SecurityAction::TABLENAME_SECURITY_ACTION_ACCESS_ROLE ."
	               WHERE  " . $criteria->createSql();
	       $result = $this->db->fetchAll($sql);
	    } catch(Exception $e)
	    {
	       throw new SecurityActionException("No se pudieron obtener las relaciones\n" . $e->getMessage());
	    }
	    return $result;
	}
	
	/**
	 * Get a SecurityActionCollection by AccessRole
	 * @param int $idAccessRole
	 * @return SecurityActionCollection
	 */
	public function getByAccessRole($idAccessRole)
	{
	    $criteria = new Criteria();
	    $criteria->add('id_access_role', $idAccessRole, Criteria::EQUAL);
	    $securityActionAccessRole = $this->getSecurityActionAccessRole($criteria);
	    $ids = array();
	    foreach($securityActionAccessRole as $rs){
	        $ids[] = $rs['id_security_action'];
	    }
	    return $this->getByIds($ids);
	}
	    


} 
 
