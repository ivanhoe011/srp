<?php
/**
 * SRP
 *
 * SRP INELECTRA
 *
 * @category   lib
 * @package    lib_models
 * @copyright  Copyright (c) 2010 PCSMEXICO
 * @author     <arturo>, $LastChangedBy$
 * @version    1.0.2 SVN: $Id$
 */

/**
 * Dependences
 */
require_once "lib/db/Catalog.php";
require_once "application/models/beans/Department.php";
require_once "application/models/exceptions/DepartmentException.php";
require_once "application/models/collections/DepartmentCollection.php";
require_once "application/models/factories/DepartmentFactory.php";

/**
 * Singleton DepartmentCatalog Class
 *
 * @category   lib
 * @package    lib_models
 * @subpackage lib_models_catalogs
 * @copyright  Copyright (c) 2010 PCSMEXICO
 * @copyright  This File has been proudly generated by Bender (http://code.google.com/p/bender-modeler/). <chentepixtol> <zetta>
 * @author     zetta & chentepixtol
 * @version    1.0.2 SVN: $Revision$
 */
class DepartmentCatalog extends Catalog
{

    /**
     * Singleton Instance
     * @var DepartmentCatalog
     */
    static protected $instance = null;


    /**
     * Método para obtener la instancia del catálogo
     * @return DepartmentCatalog
     */
    public static function getInstance()
    {
        if (!isset(self::$instance))
        {
          self::$instance = new self();
        }
        return self::$instance;
    }
    
    /**
     * Constructor de la clase DepartmentCatalog
     * @return DepartmentCatalog
     */
    protected function DepartmentCatalog()
    {
        parent::Catalog();
    }

    /**
     * Metodo para agregar un Department a la base de datos
     * @param Department $department Objeto Department
     */
    public function create($department)
    {
        if(!($department instanceof Department))
            throw new DepartmentException("passed parameter isn't a Department instance");
        try
        {
            $data = array(
                'id_department_head' => $department->getIdDepartmentHead(),
                'department_code' => $department->getDepartmentCode(),
                'department_name' => $department->getDepartmentName(),
                'status' => $department->getStatus(),
            );
            $data = array_filter($data, 'Catalog::notNull');
            $this->db->insert(Department::TABLENAME, $data);
            $department->setIdDepartment($this->db->lastInsertId());
        }
        catch(Exception $e)
        {
            throw new DepartmentException("The Department can't be saved \n" . $e->getMessage());
        }
    }

    /**
     * Metodo para Obtener los datos de un objeto por su llave primaria
     * @param int $idDepartment
     * @param boolean $throw
     * @return Department|null
     */
    public function getById($idDepartment, $throw = false)
    {
        try
        {
            $criteria = new Criteria();
            $criteria->add(Department::ID_DEPARTMENT, $idDepartment, Criteria::EQUAL);
            $newDepartment = $this->getByCriteria($criteria)->getOne();
        }
        catch(Exception $e)
        {
            throw new DepartmentException("Can't obtain the Department \n" . $e->getMessage());
        }
        if($throw && null == $newDepartment)
            throw new DepartmentException("The Department at $idDepartment not exists ");
        return $newDepartment;
    }
    
    /**
     * Metodo para Obtener una colección de objetos por varios ids
     * @param array $ids
     * @return DepartmentCollection
     */
    public function getByIds(array $ids)
    {
        if(null == $ids) return new DepartmentCollection();
        try
        {
            $criteria = new Criteria();
            $criteria->add(Department::ID_DEPARTMENT, $ids, Criteria::IN);
            $departmentCollection = $this->getByCriteria($criteria);
        }
        catch(Exception $e)
        {
            throw new DepartmentException("DepartmentCollection can't be populated\n" . $e->getMessage());
        }
        return $departmentCollection;
    }

    /**
     * Metodo para actualizar un Department
     * @param Department $department 
     */
    public function update($department)
    {
        //die($department instanceof DepartmentProject);
        if(!($department instanceof Department))
            throw new DepartmentException("passed parameter isn't a Department instance");
        try
        {
            $where[] = "id_department = '{$department->getIdDepartment()}'";
            $data = array(
                'id_department_head' => $department->getIdDepartmentHead(),
                'department_code' => $department->getDepartmentCode(),
                'department_name' => $department->getDepartmentName(),
                'status' => $department->getStatus(),
            );
            $data = array_filter($data, 'Catalog::notNull');
            $this->db->update(Department::TABLENAME, $data, $where);
        }
        catch(Exception $e)
        {
            throw new DepartmentException("The Department can't be updated \n" . $e->getMessage());
        }
    }
    
    /**
     * Metodo para guardar un department
     * @param Department $department
     */	
    public function save($department)
    {
        if(!($department instanceof Department))
            throw new DepartmentException("passed parameter isn't a Department instance");
        if(null != $department->getIdDepartment())
            $this->update($department);
        else
            $this->create($department);
    }

    /**
     * Metodo para eliminar un department
     * @param Department $department
     */
    public function delete($department)
    {
        if(!($department instanceof Department))
            throw new DepartmentException("passed parameter isn't a Department instance");
        $this->deleteById($department->getIdDepartment());
    }

    /**
     * Metodo para eliminar un Department a partir de su Id
     * @param int $idDepartment
     */
    public function deleteById($idDepartment)
    {
        try
        {
            $where = array($this->db->quoteInto('id_department = ?', $idDepartment));
            $this->db->delete(Department::TABLENAME, $where);
        }
        catch(Exception $e)
        {
            throw new DepartmentException("The Department can't be deleted\n" . $e->getMessage());
        }
    }
    
    /**
     * Metodo para eliminar varios Department a partir de su Id
     * @param array $ids
     */
    public function deleteByIds(array $ids)
    {
        try
        {
            $criteria = new Criteria();
            $criteria->add(Department::ID_DEPARTMENT, $ids, Criteria::IN);
            $this->db->delete(Department::TABLENAME, array($criteria->createSql()));
        }
        catch(Exception $e)
        {
            throw new DepartmentException("Can't delete that\n" . $e->getMessage());
        }
    }
    
    /**
     * Metodo para Obtener todos los ids en un arreglo
     * @return array
     */
    public function retrieveAllIds()
    {
        return $this->getIdsByCriteria(new Criteria());
    }

    /**
     * Metodo para obtener todos los id de Department por criterio
     * @param Criteria $criteria
     * @return array Array con todos los id de Department que encajen en la busqueda
     */
    public function getIdsByCriteria(Criteria $criteria = null)
    {
        $criteria = (null === $criteria) ? new Criteria() : $criteria;
        return $this->getCustomFieldByCriteria(Department::ID_DEPARTMENT, $criteria);
    }

    /**
     * Metodo para obtener un campo en particular de un Department dado un criterio
     * @param string $field
     * @param Criteria $criteria
     * @param $distinct
     * @return array Array con el campo de los objetos Department que encajen en la busqueda
     */
    public function getCustomFieldByCriteria($field, Criteria $criteria = null, $distinct = false)
    { 
        $criteria = (null === $criteria) ? new Criteria() : $criteria;
        $distinct = $distinct ? 'DISTINCT' : '';
        try
        {
            $sql = "SELECT {$distinct} {$field}
                    FROM ".Department::TABLENAME."
                    WHERE  " . $criteria->createSql();
            $result = $this->db->fetchCol($sql);
        } catch(Zend_Db_Exception $e)
        {
            throw new DepartmentException("No se pudieron obtener los fields de objetos Department\n" . $e->getMessage());
        }
        return $result;
    }

    /**
     * Metodo que regresa una coleccion de objetos Department 
     * dependiendo del criterio establecido
     * @param Criteria $criteria
     * @return DepartmentCollection $departmentCollection
     */
    public function getByCriteria(Criteria $criteria = null)
    {
        $criteria = (null === $criteria) ? new Criteria() : $criteria;
        $this->db->setFetchMode(Zend_Db::FETCH_ASSOC);
        try 
        {
            $sql = "SELECT * FROM ".Department::TABLENAME."
                    WHERE " . $criteria->createSql();
            $departmentCollection = new DepartmentCollection();
            foreach ($this->db->fetchAll($sql) as $result){
                $departmentCollection->append($this->getDepartmentInstance($result));
            }
        }
        catch(Zend_Db_Exception $e)
        {
            throw new DepartmentException("Cant obtain DepartmentCollection\n" . $e->getMessage());
        }
        return $departmentCollection;
    }
    
    /**
     * Metodo que cuenta Department 
     * dependiendo del criterio establecido
     * @param Criteria $criteria
     * @param string $field
     * @return int $count
     */
    public function countByCriteria(Criteria $criteria = null, $field = 'id_department')
    {
        $criteria = (null === $criteria) ? new Criteria() : $criteria;
        try 
        {
            $sql = "SELECT COUNT( $field ) FROM ".Department::TABLENAME."
                    WHERE " . $criteria->createSql();   
            $count = $this->db->fetchOne($sql);
        }
        catch(Zend_Db_Exception $e)
        {
            throw new DepartmentException("Cant obtain the count \n" . $e->getMessage());
        }
        return $count;
    }
    
    /**
     * Método que construye un objeto Department y lo rellena con la información del rowset
     * @param array $result El arreglo que devolvió el objeto Zend_Db despues del fetch
     * @return Department 
     */
    private function getDepartmentInstance($result)
    {
        return DepartmentFactory::createFromArray($result);
    }
  
    /**
     * Obtiene un DepartmentCollection  dependiendo del idDepartmentHead
     * @param int $idDepartmentHead  
     * @return DepartmentCollection 
     */
    public function getByIdDepartmentHead($idDepartmentHead)
    {
        $criteria = new Criteria();
        $criteria->add(Department::ID_DEPARTMENT_HEAD, $idDepartmentHead, Criteria::EQUAL);
        $departmentCollection = $this->getByCriteria($criteria);
        return $departmentCollection;
    }

    /**
     * Obtiene un DepartmentCollection  dependiendo del departmentCode
     * @param int $departmentCode
     * @return DepartmentCollection
     */
    public function getByDepartmentCode($departmentCode)
    {
        $criteria = new Criteria();
        $criteria->add(Department::DEPARTMENT_CODE, $departmentCode, Criteria::EQUAL);
        $departmentCollection = $this->getByCriteria($criteria);
        return $departmentCollection;
    }


    /**
     * Metodo que regresa una coleccion de objetos Department con Status 'Active'
     * dependiendo del criterio establecido
     * @param Criteria $criteria
     * @return DepartmentCollection $departmentCollection
     */
    public function getActives(Criteria $criteria = null)
    {
        $criteria = (null === $criteria) ? new Criteria() : $criteria;
        $criteria->add(Department::STATUS, Department::$Status['Active'], Criteria::EQUAL);
        return $this->getByCriteria($criteria);
    }
    
    /**
     * Metodo que regresa una coleccion de objetos Department con Status 'Inactive'
     * dependiendo del criterio establecido
     * @param Criteria $criteria
     * @return DepartmentCollection $departmentCollection
     */
    public function getInactives(Criteria $criteria = null)
    {
        $criteria = (null === $criteria) ? new Criteria() : $criteria;
        $criteria->add(Department::STATUS, Department::$Status['Inactive'], Criteria::EQUAL);
        return $this->getByCriteria($criteria);
    }
    
    /**
     * Activate a department
     * @param Department $department
     */ 
    public function activate($department)
    {
        if(!($department instanceof Department))
            throw new DepartmentException("passed parameter isn't a Department instance");
        if(Department::$Status['Active'] != $department->getStatus())
        {
            $department->setStatus(Department::$Status['Active']);
            $this->save($department);
        }
    }
    
    /**
     * Deactivate a department
     * @param Department $department
     */ 
    public function deactivate($department)
    {
        if(!($department instanceof Department))
            throw new DepartmentException("passed parameter isn't a Department instance");
        if(Department::$Status['Inactive'] != $department->getStatus())
        {
            $department->setStatus(Department::$Status['Inactive']);
            $this->save($department);
        }
    }


} 
 
