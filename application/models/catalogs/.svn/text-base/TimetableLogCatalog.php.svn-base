<?php
/**
 * SRP
 *
 * SRP INELECTRA
 *
 * @category   lib
 * @package    lib_models
 * @copyright  Copyright (c) 2010 PCSMEXICO
 * @author     <arturo>, $LastChangedBy$
 * @version    1.0.2 SVN: $Id$
 */

/**
 * Dependences
 */
require_once "lib/db/Catalog.php";
require_once "application/models/beans/TimetableLog.php";
require_once "application/models/exceptions/TimetableLogException.php";
require_once "application/models/collections/TimetableLogCollection.php";
require_once "application/models/factories/TimetableLogFactory.php";

/**
 * Singleton TimetableLogCatalog Class
 *
 * @category   lib
 * @package    lib_models
 * @subpackage lib_models_catalogs
 * @copyright  Copyright (c) 2010 PCSMEXICO
 * @copyright  This File has been proudly generated by Bender (http://code.google.com/p/bender-modeler/). <chentepixtol> <zetta>
 * @author     zetta & chentepixtol
 * @version    1.0.2 SVN: $Revision$
 */
class TimetableLogCatalog extends Catalog
{

    /**
     * Singleton Instance
     * @var TimetableLogCatalog
     */
    static protected $instance = null;


    /**
     * Método para obtener la instancia del catálogo
     * @return TimetableLogCatalog
     */
    public static function getInstance()
    {
        if (!isset(self::$instance))
        {
          self::$instance = new self();
        }
        return self::$instance;
    }
    
    /**
     * Constructor de la clase TimetableLogCatalog
     * @return TimetableLogCatalog
     */
    protected function TimetableLogCatalog()
    {
        parent::Catalog();
    }

    /**
     * Metodo para agregar un TimetableLog a la base de datos
     * @param TimetableLog $timetableLog Objeto TimetableLog
     */
    public function create($timetableLog)
    {
        if(!($timetableLog instanceof TimetableLog))
            throw new TimetableLogException("passed parameter isn't a TimetableLog instance");
        try
        {
            $data = array(
                'id_timetable' => $timetableLog->getIdTimetable(),
                'timestamp' => $timetableLog->getTimestamp(),
                'id_employee' => $timetableLog->getIdEmployee(),
                'type' => $timetableLog->getType(),
            );
            $data = array_filter($data, 'Catalog::notNull');
            $this->db->insert(TimetableLog::TABLENAME, $data);
            $timetableLog->setIdTimetableLog($this->db->lastInsertId());
        }
        catch(Exception $e)
        {
            throw new TimetableLogException("The TimetableLog can't be saved \n" . $e->getMessage());
        }
    }

    /**
     * Metodo para Obtener los datos de un objeto por su llave primaria
     * @param int $idTimetableLog
     * @param boolean $throw
     * @return TimetableLog|null
     */
    public function getById($idTimetableLog, $throw = false)
    {
        try
        {
            $criteria = new Criteria();
            $criteria->add(TimetableLog::ID_TIMETABLE_LOG, $idTimetableLog, Criteria::EQUAL);
            $newTimetableLog = $this->getByCriteria($criteria)->getOne();
        }
        catch(Exception $e)
        {
            throw new TimetableLogException("Can't obtain the TimetableLog \n" . $e->getMessage());
        }
        if($throw && null == $newTimetableLog)
            throw new TimetableLogException("The TimetableLog at $idTimetableLog not exists ");
        return $newTimetableLog;
    }
    
    /**
     * Metodo para Obtener una colección de objetos por varios ids
     * @param array $ids
     * @return TimetableLogCollection
     */
    public function getByIds(array $ids)
    {
        if(null == $ids) return new TimetableLogCollection();
        try
        {
            $criteria = new Criteria();
            $criteria->add(TimetableLog::ID_TIMETABLE_LOG, $ids, Criteria::IN);
            $timetableLogCollection = $this->getByCriteria($criteria);
        }
        catch(Exception $e)
        {
            throw new TimetableLogException("TimetableLogCollection can't be populated\n" . $e->getMessage());
        }
        return $timetableLogCollection;
    }

    /**
     * Metodo para actualizar un TimetableLog
     * @param TimetableLog $timetableLog 
     */
    public function update($timetableLog)
    {
        if(!($timetableLog instanceof TimetableLog))
            throw new TimetableLogException("passed parameter isn't a TimetableLog instance");
        try
        {
            $where[] = "id_timetable_log = '{$timetableLog->getIdTimetableLog()}'";
            $data = array(
                'id_timetable' => $timetableLog->getIdTimetable(),
                'timestamp' => $timetableLog->getTimestamp(),
                'id_employee' => $timetableLog->getIdEmployee(),
                'type' => $timetableLog->getType(),
            );
            $data = array_filter($data, 'Catalog::notNull');
            $this->db->update(TimetableLog::TABLENAME, $data, $where);
        }
        catch(Exception $e)
        {
            throw new TimetableLogException("The TimetableLog can't be updated \n" . $e->getMessage());
        }
    }
    
    /**
     * Metodo para guardar un timetableLog
     * @param TimetableLog $timetableLog
     */	
    public function save($timetableLog)
    {
        if(!($timetableLog instanceof TimetableLog))
            throw new TimetableLogException("passed parameter isn't a TimetableLog instance");
        if(null != $timetableLog->getIdTimetableLog())
            $this->update($timetableLog);
        else
            $this->create($timetableLog);
    }

    /**
     * Metodo para eliminar un timetableLog
     * @param TimetableLog $timetableLog
     */
    public function delete($timetableLog)
    {
        if(!($timetableLog instanceof TimetableLog))
            throw new TimetableLogException("passed parameter isn't a TimetableLog instance");
        $this->deleteById($timetableLog->getIdTimetableLog());
    }

    /**
     * Metodo para eliminar un TimetableLog a partir de su Id
     * @param int $idTimetableLog
     */
    public function deleteById($idTimetableLog)
    {
        try
        {
            $where = array($this->db->quoteInto('id_timetable_log = ?', $idTimetableLog));
            $this->db->delete(TimetableLog::TABLENAME, $where);
        }
        catch(Exception $e)
        {
            throw new TimetableLogException("The TimetableLog can't be deleted\n" . $e->getMessage());
        }
    }
    
    /**
     * Metodo para eliminar varios TimetableLog a partir de su Id
     * @param array $ids
     */
    public function deleteByIds(array $ids)
    {
        try
        {
            $criteria = new Criteria();
            $criteria->add(TimetableLog::ID_TIMETABLE_LOG, $ids, Criteria::IN);
            $this->db->delete(TimetableLog::TABLENAME, array($criteria->createSql()));
        }
        catch(Exception $e)
        {
            throw new TimetableLogException("Can't delete that\n" . $e->getMessage());
        }
    }
    
    /**
     * Metodo para Obtener todos los ids en un arreglo
     * @return array
     */
    public function retrieveAllIds()
    {
        return $this->getIdsByCriteria(new Criteria());
    }

    /**
     * Metodo para obtener todos los id de TimetableLog por criterio
     * @param Criteria $criteria
     * @return array Array con todos los id de TimetableLog que encajen en la busqueda
     */
    public function getIdsByCriteria(Criteria $criteria = null)
    {
        $criteria = (null === $criteria) ? new Criteria() : $criteria;
        return $this->getCustomFieldByCriteria(TimetableLog::ID_TIMETABLE_LOG, $criteria);
    }

    /**
     * Metodo para obtener un campo en particular de un TimetableLog dado un criterio
     * @param string $field
     * @param Criteria $criteria
     * @param $distinct
     * @return array Array con el campo de los objetos TimetableLog que encajen en la busqueda
     */
    public function getCustomFieldByCriteria($field, Criteria $criteria = null, $distinct = false)
    { 
        $criteria = (null === $criteria) ? new Criteria() : $criteria;
        $distinct = $distinct ? 'DISTINCT' : '';
        try
        {
            $sql = "SELECT {$distinct} {$field}
                    FROM ".TimetableLog::TABLENAME."
                    WHERE  " . $criteria->createSql();
            $result = $this->db->fetchCol($sql);
        } catch(Zend_Db_Exception $e)
        {
            throw new TimetableLogException("No se pudieron obtener los fields de objetos TimetableLog\n" . $e->getMessage());
        }
        return $result;
    }

    /**
     * Metodo que regresa una coleccion de objetos TimetableLog 
     * dependiendo del criterio establecido
     * @param Criteria $criteria
     * @return TimetableLogCollection $timetableLogCollection
     */
    public function getByCriteria(Criteria $criteria = null)
    {
        $criteria = (null === $criteria) ? new Criteria() : $criteria;
        $this->db->setFetchMode(Zend_Db::FETCH_ASSOC);
        try 
        {
            $sql = "SELECT * FROM ".TimetableLog::TABLENAME."
                    WHERE " . $criteria->createSql();
            $timetableLogCollection = new TimetableLogCollection();
            foreach ($this->db->fetchAll($sql) as $result){
                $timetableLogCollection->append($this->getTimetableLogInstance($result));
            }
        }
        catch(Zend_Db_Exception $e)
        {
            throw new TimetableLogException("Cant obtain TimetableLogCollection\n" . $e->getMessage());
        }
        return $timetableLogCollection;
    }
    
    /**
     * Metodo que cuenta TimetableLog 
     * dependiendo del criterio establecido
     * @param Criteria $criteria
     * @param string $field
     * @return int $count
     */
    public function countByCriteria(Criteria $criteria = null, $field = 'id_timetable_log')
    {
        $criteria = (null === $criteria) ? new Criteria() : $criteria;
        try 
        {
            $sql = "SELECT COUNT( $field ) FROM ".TimetableLog::TABLENAME."
                    WHERE " . $criteria->createSql();   
            $count = $this->db->fetchOne($sql);
        }
        catch(Zend_Db_Exception $e)
        {
            throw new TimetableLogException("Cant obtain the count \n" . $e->getMessage());
        }
        return $count;
    }
    
    /**
     * Método que construye un objeto TimetableLog y lo rellena con la información del rowset
     * @param array $result El arreglo que devolvió el objeto Zend_Db despues del fetch
     * @return TimetableLog 
     */
    private function getTimetableLogInstance($result)
    {
        return TimetableLogFactory::createFromArray($result);
    }
  
    /**
     * Obtiene un TimetableLogCollection  dependiendo del idTimetable
     * @param int $idTimetable  
     * @return TimetableLogCollection 
     */
    public function getByIdTimetable($idTimetable)
    {
        $criteria = new Criteria();
        $criteria->add(TimetableLog::ID_TIMETABLE, $idTimetable, Criteria::EQUAL);
        $timetableLogCollection = $this->getByCriteria($criteria);
        return $timetableLogCollection;
    }
  
    /**
     * Obtiene un TimetableLogCollection  dependiendo del idEmployee
     * @param int $idEmployee  
     * @return TimetableLogCollection 
     */
    public function getByIdEmployee($idEmployee)
    {
        $criteria = new Criteria();
        $criteria->add(TimetableLog::ID_EMPLOYEE, $idEmployee, Criteria::EQUAL);
        $timetableLogCollection = $this->getByCriteria($criteria);
        return $timetableLogCollection;
    }


} 
 
