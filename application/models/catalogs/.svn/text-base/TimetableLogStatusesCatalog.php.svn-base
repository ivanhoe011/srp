<?php
/**
 * SRP
 *
 * SRP INELECTRA
 *
 * @category   lib
 * @package    lib_models
 * @copyright  Copyright (c) 2010 PCSMEXICO
 * @author     <arturo>, $LastChangedBy$
 * @version    1.0.2 SVN: $Id$
 */

/**
 * Dependences
 */
require_once "application/models/catalogs/TimetableLogCatalog.php";
require_once "application/models/beans/TimetableLogStatuses.php";
require_once "application/models/exceptions/TimetableLogStatusesException.php";
require_once "application/models/collections/TimetableLogStatusesCollection.php";
require_once "application/models/factories/TimetableLogStatusesFactory.php";

/**
 * Singleton TimetableLogStatusesCatalog Class
 *
 * @category   lib
 * @package    lib_models
 * @subpackage lib_models_catalogs
 * @copyright  Copyright (c) 2010 PCSMEXICO
 * @copyright  This File has been proudly generated by Bender (http://code.google.com/p/bender-modeler/). <chentepixtol> <zetta>
 * @author     zetta & chentepixtol
 * @version    1.0.2 SVN: $Revision$
 */
class TimetableLogStatusesCatalog extends TimetableLogCatalog
{

    /**
     * Singleton Instance
     * @var TimetableLogStatusesCatalog
     */
    static protected $instance = null;


    /**
     * Método para obtener la instancia del catálogo
     * @return TimetableLogStatusesCatalog
     */
    public static function getInstance()
    {
        if (!isset(self::$instance))
        {
          self::$instance = new self();
        }
        return self::$instance;
    }
    
    /**
     * Constructor de la clase TimetableLogStatusesCatalog
     * @return TimetableLogStatusesCatalog
     */
    protected function TimetableLogStatusesCatalog()
    {
        parent::TimetableLogCatalog();
    }

    /**
     * Metodo para agregar un TimetableLogStatuses a la base de datos
     * @param TimetableLogStatuses $timetableLogStatuses Objeto TimetableLogStatuses
     */
    public function create($timetableLogStatuses)
    {
        if(!($timetableLogStatuses instanceof TimetableLogStatuses))
            throw new TimetableLogStatusesException("passed parameter isn't a TimetableLogStatuses instance");
        try
        {
            if(!$timetableLogStatuses->getIdTimetableLog())
              parent::create($timetableLogStatuses);
            $data = array(
                'id_timetable_log' => $timetableLogStatuses->getIdTimetableLog(),
                'status' => $timetableLogStatuses->getStatus(),
                'rejected_reason' => $timetableLogStatuses->getRejectedReason(),
            );
            $data = array_filter($data, 'Catalog::notNull');
            $this->db->insert(TimetableLogStatuses::TABLENAME, $data);
            $timetableLogStatuses->setIdTimetableLogStatus($this->db->lastInsertId());
        }
        catch(Exception $e)
        {
            throw new TimetableLogStatusesException("The TimetableLogStatuses can't be saved \n" . $e->getMessage());
        }
    }

    /**
     * Metodo para Obtener los datos de un objeto por su llave primaria
     * @param int $idTimetableLogStatus
     * @param boolean $throw
     * @return TimetableLogStatuses|null
     */
    public function getById($idTimetableLogStatus, $throw = false)
    {
        try
        {
            $criteria = new Criteria();
            $criteria->add(TimetableLogStatuses::ID_TIMETABLE_LOG_STATUS, $idTimetableLogStatus, Criteria::EQUAL);
            $newTimetableLogStatuses = $this->getByCriteria($criteria)->getOne();
        }
        catch(Exception $e)
        {
            throw new TimetableLogStatusesException("Can't obtain the TimetableLogStatuses \n" . $e->getMessage());
        }
        if($throw && null == $newTimetableLogStatuses)
            throw new TimetableLogStatusesException("The TimetableLogStatuses at $idTimetableLogStatus not exists ");
        return $newTimetableLogStatuses;
    }
    
    /**
     * Metodo para Obtener una colección de objetos por varios ids
     * @param array $ids
     * @return TimetableLogStatusesCollection
     */
    public function getByIds(array $ids)
    {
        if(null == $ids) return new TimetableLogStatusesCollection();
        try
        {
            $criteria = new Criteria();
            $criteria->add(TimetableLogStatuses::ID_TIMETABLE_LOG_STATUS, $ids, Criteria::IN);
            $timetableLogStatusesCollection = $this->getByCriteria($criteria);
        }
        catch(Exception $e)
        {
            throw new TimetableLogStatusesException("TimetableLogStatusesCollection can't be populated\n" . $e->getMessage());
        }
        return $timetableLogStatusesCollection;
    }

    /**
     * Metodo para actualizar un TimetableLogStatuses
     * @param TimetableLogStatuses $timetableLogStatuses 
     */
    public function update($timetableLogStatuses)
    {
        if(!($timetableLogStatuses instanceof TimetableLogStatuses))
            throw new TimetableLogStatusesException("passed parameter isn't a TimetableLogStatuses instance");
        try
        {
            $where[] = "id_timetable_log_status = '{$timetableLogStatuses->getIdTimetableLogStatus()}'";
            $data = array(
                'id_timetable_log' => $timetableLogStatuses->getIdTimetableLog(),
                'status' => $timetableLogStatuses->getStatus(),
                'rejected_reason' => $timetableLogStatuses->getRejectedReason(),
            );
            $data = array_filter($data, 'Catalog::notNull');
            $this->db->update(TimetableLogStatuses::TABLENAME, $data, $where);
            parent::update($timetableLogStatuses);
        }
        catch(Exception $e)
        {
            throw new TimetableLogStatusesException("The TimetableLogStatuses can't be updated \n" . $e->getMessage());
        }
    }
    
    /**
     * Metodo para guardar un timetableLogStatuses
     * @param TimetableLogStatuses $timetableLogStatuses
     */	
    public function save($timetableLogStatuses)
    {
        if(!($timetableLogStatuses instanceof TimetableLogStatuses))
            throw new TimetableLogStatusesException("passed parameter isn't a TimetableLogStatuses instance");
        if(null != $timetableLogStatuses->getIdTimetableLogStatus())
            $this->update($timetableLogStatuses);
        else
            $this->create($timetableLogStatuses);
    }

    /**
     * Metodo para eliminar un timetableLogStatuses
     * @param TimetableLogStatuses $timetableLogStatuses
     */
    public function delete($timetableLogStatuses)
    {
        if(!($timetableLogStatuses instanceof TimetableLogStatuses))
            throw new TimetableLogStatusesException("passed parameter isn't a TimetableLogStatuses instance");
        $this->deleteById($timetableLogStatuses->getIdTimetableLogStatus());
        parent::delete($timetableLogStatuses);
    }

    /**
     * Metodo para eliminar un TimetableLogStatuses a partir de su Id
     * @param int $idTimetableLogStatus
     */
    public function deleteById($idTimetableLogStatus)
    {
        try
        {
            $where = array($this->db->quoteInto('id_timetable_log_status = ?', $idTimetableLogStatus));
            $this->db->delete(TimetableLogStatuses::TABLENAME, $where);
        }
        catch(Exception $e)
        {
            throw new TimetableLogStatusesException("The TimetableLogStatuses can't be deleted\n" . $e->getMessage());
        }
    }
    
    /**
     * Metodo para eliminar varios TimetableLogStatuses a partir de su Id
     * @param array $ids
     */
    public function deleteByIds(array $ids)
    {
        try
        {
            $criteria = new Criteria();
            $criteria->add(TimetableLogStatuses::ID_TIMETABLE_LOG_STATUS, $ids, Criteria::IN);
            $this->db->delete(TimetableLogStatuses::TABLENAME, array($criteria->createSql()));
        }
        catch(Exception $e)
        {
            throw new TimetableLogStatusesException("Can't delete that\n" . $e->getMessage());
        }
    }
    
    /**
     * Metodo para Obtener todos los ids en un arreglo
     * @return array
     */
    public function retrieveAllIds()
    {
        return $this->getIdsByCriteria(new Criteria());
    }

    /**
     * Metodo para obtener todos los id de TimetableLogStatuses por criterio
     * @param Criteria $criteria
     * @return array Array con todos los id de TimetableLogStatuses que encajen en la busqueda
     */
    public function getIdsByCriteria(Criteria $criteria = null)
    {
        $criteria = (null === $criteria) ? new Criteria() : $criteria;
        return $this->getCustomFieldByCriteria(TimetableLogStatuses::ID_TIMETABLE_LOG_STATUS, $criteria);
    }

    /**
     * Metodo para obtener un campo en particular de un TimetableLogStatuses dado un criterio
     * @param string $field
     * @param Criteria $criteria
     * @param $distinct
     * @return array Array con el campo de los objetos TimetableLogStatuses que encajen en la busqueda
     */
    public function getCustomFieldByCriteria($field, Criteria $criteria = null, $distinct = false)
    { 
        $criteria = (null === $criteria) ? new Criteria() : $criteria;
        $distinct = $distinct ? 'DISTINCT' : '';
        try
        {
            $sql = "SELECT {$distinct} {$field}
                    FROM ".TimetableLogStatuses::TABLENAME."
                      INNER JOIN ".TimetableLog::TABLENAME." USING ( id_timetable_log )
                    WHERE  " . $criteria->createSql();
            $result = $this->db->fetchCol($sql);
        } catch(Zend_Db_Exception $e)
        {
            throw new TimetableLogStatusesException("No se pudieron obtener los fields de objetos TimetableLogStatuses\n" . $e->getMessage());
        }
        return $result;
    }

    /**
     * Metodo que regresa una coleccion de objetos TimetableLogStatuses 
     * dependiendo del criterio establecido
     * @param Criteria $criteria
     * @return TimetableLogStatusesCollection $timetableLogStatusesCollection
     */
    public function getByCriteria(Criteria $criteria = null)
    {
        $criteria = (null === $criteria) ? new Criteria() : $criteria;
        $this->db->setFetchMode(Zend_Db::FETCH_ASSOC);
        try 
        {
            $sql = "SELECT * FROM ".TimetableLogStatuses::TABLENAME."
                      INNER JOIN ".TimetableLog::TABLENAME." USING ( id_timetable_log )
                    WHERE " . $criteria->createSql();
            $timetableLogStatusesCollection = new TimetableLogStatusesCollection();
            foreach ($this->db->fetchAll($sql) as $result){
                $timetableLogStatusesCollection->append($this->getTimetableLogStatusesInstance($result));
            }
        }
        catch(Zend_Db_Exception $e)
        {
            throw new TimetableLogStatusesException("Cant obtain TimetableLogStatusesCollection\n" . $e->getMessage());
        }
        return $timetableLogStatusesCollection;
    }
    
    /**
     * Metodo que cuenta TimetableLogStatuses 
     * dependiendo del criterio establecido
     * @param Criteria $criteria
     * @param string $field
     * @return int $count
     */
    public function countByCriteria(Criteria $criteria = null, $field = 'id_timetable_log_status')
    {
        $criteria = (null === $criteria) ? new Criteria() : $criteria;
        try 
        {
            $sql = "SELECT COUNT( $field ) FROM ".TimetableLogStatuses::TABLENAME."
                      INNER JOIN ".TimetableLog::TABLENAME." USING ( id_timetable_log )
                    WHERE " . $criteria->createSql();   
            $count = $this->db->fetchOne($sql);
        }
        catch(Zend_Db_Exception $e)
        {
            throw new TimetableLogStatusesException("Cant obtain the count \n" . $e->getMessage());
        }
        return $count;
    }
    
    /**
     * Método que construye un objeto TimetableLogStatuses y lo rellena con la información del rowset
     * @param array $result El arreglo que devolvió el objeto Zend_Db despues del fetch
     * @return TimetableLogStatuses 
     */
    private function getTimetableLogStatusesInstance($result)
    {
        return TimetableLogStatusesFactory::createFromArray($result);
    }
  
    /**
     * Obtiene un TimetableLogStatusesCollection  dependiendo del idTimetableLog
     * @param int $idTimetableLog  
     * @return TimetableLogStatusesCollection 
     */
    public function getByIdTimetableLog($idTimetableLog)
    {
        $criteria = new Criteria();
        $criteria->add(TimetableLogStatuses::ID_TIMETABLE_LOG, $idTimetableLog, Criteria::EQUAL);
        $timetableLogStatusesCollection = $this->getByCriteria($criteria);
        return $timetableLogStatusesCollection;
    }

    /**
     * Metodo que regresa una coleccion de objetos TimetableLogStatuses con IdTimetableLogStatus 'Active'
     * dependiendo del criterio establecido
     * @param Criteria $criteria
     * @return TimetableLogStatusesCollection $timetableLogStatusesCollection
     */
    public function getActives(Criteria $criteria = null)
    {
        $criteria = (null === $criteria) ? new Criteria() : $criteria;
        $criteria->add(TimetableLogStatuses::ID_TIMETABLE_LOG_STATUS, TimetableLogStatuses::$IdTimetableLogStatus['Active'], Criteria::EQUAL);
        return $this->getByCriteria($criteria);
    }
    
    /**
     * Metodo que regresa una coleccion de objetos TimetableLogStatuses con IdTimetableLogStatus 'Inactive'
     * dependiendo del criterio establecido
     * @param Criteria $criteria
     * @return TimetableLogStatusesCollection $timetableLogStatusesCollection
     */
    public function getInactives(Criteria $criteria = null)
    {
        $criteria = (null === $criteria) ? new Criteria() : $criteria;
        $criteria->add(TimetableLogStatuses::ID_TIMETABLE_LOG_STATUS, TimetableLogStatuses::$IdTimetableLogStatus['Inactive'], Criteria::EQUAL);
        return $this->getByCriteria($criteria);
    }
    
    /**
     * Activate a timetableLogStatuses
     * @param TimetableLogStatuses $timetableLogStatuses
     */ 
    public function activate($timetableLogStatuses)
    {
        if(!($timetableLogStatuses instanceof TimetableLogStatuses))
            throw new TimetableLogStatusesException("passed parameter isn't a TimetableLogStatuses instance");
        if(TimetableLogStatuses::$IdTimetableLogStatus['Active'] != $timetableLogStatuses->getIdTimetableLogStatus())
        {
            $timetableLogStatuses->setIdTimetableLogStatus(TimetableLogStatuses::$IdTimetableLogStatus['Active']);
            $this->save($timetableLogStatuses);
        }
    }
    
    /**
     * Deactivate a timetableLogStatuses
     * @param TimetableLogStatuses $timetableLogStatuses
     */ 
    public function deactivate($timetableLogStatuses)
    {
        if(!($timetableLogStatuses instanceof TimetableLogStatuses))
            throw new TimetableLogStatusesException("passed parameter isn't a TimetableLogStatuses instance");
        if(TimetableLogStatuses::$IdTimetableLogStatus['Inactive'] != $timetableLogStatuses->getIdTimetableLogStatus())
        {
            $timetableLogStatuses->setIdTimetableLogStatus(TimetableLogStatuses::$IdTimetableLogStatus['Inactive']);
            $this->save($timetableLogStatuses);
        }
    }


} 
 
