<?php
/**
 * SRP
 *
 * SRP INELECTRA
 *
 * @category   lib
 * @package    lib_models
 * @copyright  Copyright (c) 2010 PCSMEXICO
 * @author     <arturo>, $LastChangedBy$
 * @version    1.0.2 SVN: $Id$
 */

/**
 * Dependences
 */
require_once "application/models/catalogs/PersonCatalog.php";
require_once "application/models/beans/User.php";
require_once "application/models/exceptions/UserException.php";
require_once "application/models/collections/UserCollection.php";
require_once "application/models/factories/UserFactory.php";

/**
 * Singleton UserCatalog Class
 *
 * @category   lib
 * @package    lib_models
 * @subpackage lib_models_catalogs
 * @copyright  Copyright (c) 2010 PCSMEXICO
 * @copyright  This File has been proudly generated by Bender (http://code.google.com/p/bender-modeler/). <chentepixtol> <zetta>
 * @author     zetta & chentepixtol
 * @version    1.0.2 SVN: $Revision$
 */
class UserCatalog extends PersonCatalog
{

    /**
     * Singleton Instance
     * @var UserCatalog
     */
    static protected $instance = null;


    /**
     * Método para obtener la instancia del catálogo
     * @return UserCatalog
     */
    public static function getInstance()
    {
        if (!isset(self::$instance))
        {
          self::$instance = new self();
        }
        return self::$instance;
    }
    
    /**
     * Constructor de la clase UserCatalog
     * @return UserCatalog
     */
    protected function UserCatalog()
    {
        parent::PersonCatalog();
    }

    /**
     * Metodo para agregar un User a la base de datos
     * @param User $user Objeto User
     */
    public function create($user)
    {
        if(!($user instanceof User))
            throw new UserException("passed parameter isn't a User instance");
        try
        {
            if(!$user->getIdPerson())
              parent::create($user);
            $data = array(
                'username' => $user->getUsername(),
                'password' => $user->getPassword(),
                'status' => $user->getStatus(),
                'id_access_role' => $user->getIdAccessRole(),
                'id_person' => $user->getIdPerson(),
                'system' => $user->getSystem(),
            );
            $data = array_filter($data, 'Catalog::notNull');
            $this->db->insert(User::TABLENAME, $data);
            $user->setIdUser($this->db->lastInsertId());
        }
        catch(Exception $e)
        {
            throw new UserException("The User can't be saved \n" . $e->getMessage());
        }
    }

    /**
     * Metodo para Obtener los datos de un objeto por su llave primaria
     * @param int $idUser
     * @param boolean $throw
     * @return User|null
     */
    public function getById($idUser, $throw = false)
    {
        try
        {
            $criteria = new Criteria();
            $criteria->add(User::ID_USER, $idUser, Criteria::EQUAL);
            $newUser = $this->getByCriteria($criteria)->getOne();
        }
        catch(Exception $e)
        {
            throw new UserException("Can't obtain the User \n" . $e->getMessage());
        }
        if($throw && null == $newUser)
            throw new UserException("The User at $idUser not exists ");
        return $newUser;
    }

    /**
     * Metodo para Obtener los datos de un objeto por su llave primaria
     * @param int $username
     * @return User|null
     */
    public function getByUsername($username)
    {
        try
        {
            $criteria = new Criteria();
            $criteria->add(User::USERNAME, $username, Criteria::EQUAL);
            $newUser = $this->getByCriteria($criteria)->getOne();
        }
        catch(Exception $e)
        {
            throw new UserException("Can't obtain the User \n" . $e->getMessage());
        }
        if($throw && null == $newUser)
            throw new UserException("The User at $idUser not exists ");
        return $newUser;
    }
    
    /**
     * Metodo para Obtener una colección de objetos por varios ids
     * @param array $ids
     * @return UserCollection
     */
    public function getByIds(array $ids)
    {
        if(null == $ids) return new UserCollection();
        try
        {
            $criteria = new Criteria();
            $criteria->add(User::ID_USER, $ids, Criteria::IN);
            $userCollection = $this->getByCriteria($criteria);
        }
        catch(Exception $e)
        {
            throw new UserException("UserCollection can't be populated\n" . $e->getMessage());
        }
        return $userCollection;
    }

    /**
     * Metodo para actualizar un User
     * @param User $user 
     */
    public function update($user)
    {
        if(!($user instanceof User))
            throw new UserException("passed parameter isn't a User instance");
        try
        {
            $where[] = "id_user = '{$user->getIdUser()}'";
            $data = array(
                'username' => $user->getUsername(),
                'password' => $user->getPassword(),
                'status' => $user->getStatus(),
                'id_access_role' => $user->getIdAccessRole(),
                'id_person' => $user->getIdPerson(),
                'system' => $user->getSystem(),
            );
            $data = array_filter($data, 'Catalog::notNull');
            $this->db->update(User::TABLENAME, $data, $where);
            parent::update($user);
        }
        catch(Exception $e)
        {
            throw new UserException("The User can't be updated \n" . $e->getMessage());
        }
    }
    
    /**
     * Metodo para guardar un user
     * @param User $user
     */	
    public function save($user)
    {
        if(!($user instanceof User))
            throw new UserException("passed parameter isn't a User instance");
        if(null != $user->getIdUser())
            $this->update($user);
        else
            $this->create($user);
    }

    /**
     * Metodo para eliminar un user
     * @param User $user
     */
    public function delete($user)
    {
        if(!($user instanceof User))
            throw new UserException("passed parameter isn't a User instance");
        $this->deleteById($user->getIdUser());
        parent::delete($user);
    }

    /**
     * Metodo para eliminar un User a partir de su Id
     * @param int $idUser
     */
    public function deleteById($idUser)
    {
        try
        {
            $where = array($this->db->quoteInto('id_user = ?', $idUser));
            $this->db->delete(User::TABLENAME, $where);
        }
        catch(Exception $e)
        {
            throw new UserException("The User can't be deleted\n" . $e->getMessage());
        }
    }
    
    /**
     * Metodo para eliminar varios User a partir de su Id
     * @param array $ids
     */
    public function deleteByIds(array $ids)
    {
        try
        {
            $criteria = new Criteria();
            $criteria->add(User::ID_USER, $ids, Criteria::IN);
            $this->db->delete(User::TABLENAME, array($criteria->createSql()));
        }
        catch(Exception $e)
        {
            throw new UserException("Can't delete that\n" . $e->getMessage());
        }
    }
    
    /**
     * Metodo para Obtener todos los ids en un arreglo
     * @return array
     */
    public function retrieveAllIds()
    {
        return $this->getIdsByCriteria(new Criteria());
    }

    /**
     * Metodo para obtener todos los id de User por criterio
     * @param Criteria $criteria
     * @return array Array con todos los id de User que encajen en la busqueda
     */
    public function getIdsByCriteria(Criteria $criteria = null)
    {
        $criteria = (null === $criteria) ? new Criteria() : $criteria;
        return $this->getCustomFieldByCriteria(User::ID_USER, $criteria);
    }

    /**
     * Metodo para obtener un campo en particular de un User dado un criterio
     * @param string $field
     * @param Criteria $criteria
     * @param $distinct
     * @return array Array con el campo de los objetos User que encajen en la busqueda
     */
    public function getCustomFieldByCriteria($field, Criteria $criteria = null, $distinct = false)
    { 
        $criteria = (null === $criteria) ? new Criteria() : $criteria;
        $distinct = $distinct ? 'DISTINCT' : '';
        try
        {
            $sql = "SELECT {$distinct} {$field}
                    FROM ".User::TABLENAME."
                      INNER JOIN ".Person::TABLENAME." USING ( id_person )
                    WHERE  " . $criteria->createSql();
            $result = $this->db->fetchCol($sql);
        } catch(Zend_Db_Exception $e)
        {
            throw new UserException("No se pudieron obtener los fields de objetos User\n" . $e->getMessage());
        }
        return $result;
    }

    /**
     * Metodo que regresa una coleccion de objetos User 
     * dependiendo del criterio establecido
     * @param Criteria $criteria
     * @return UserCollection $userCollection
     */
    public function getByCriteria(Criteria $criteria = null)
    {
        $criteria = (null === $criteria) ? new Criteria() : $criteria;
        $this->db->setFetchMode(Zend_Db::FETCH_ASSOC);
        try 
        {
            $sql = "SELECT * FROM ".User::TABLENAME."
                      INNER JOIN ".Person::TABLENAME." USING ( id_person )
                    WHERE " . $criteria->createSql();
            $userCollection = new UserCollection();
            foreach ($this->db->fetchAll($sql) as $result){
                $userCollection->append($this->getUserInstance($result));
            }
        }
        catch(Zend_Db_Exception $e)
        {
            throw new UserException("Cant obtain UserCollection\n" . $e->getMessage());
        }
        return $userCollection;
    }
    
	/**
     * Metodo que regresa una coleccion de objetos User 
     * dependiendo del nombre de búsqueda
     * @param Criteria $name
     * @return UserCollection $userCollection
     */
    public function getBySearch($name)
    {
        try 
        {
            $sql = "SELECT * FROM ".User::TABLENAME."
                      INNER JOIN ".Person::TABLENAME." USING ( id_person )
                      INNER JOIN ".Employee::TABLENAME." USING ( id_user ) 
                    WHERE concat_ws(' ', pcs_common_persons.name, pcs_common_persons.middle_name, pcs_common_persons.last_name) 
                    LIKE '%" .$name . "%'";
            $userCollection = $this->db->fetchAll($sql);
        }
        catch(Zend_Db_Exception $e)
        {
            throw new UserException("Cant obtain UserCollection\n" . $e->getMessage());
        }
        return $userCollection;
    }
    
    /**
     * Metodo que cuenta User 
     * dependiendo del criterio establecido
     * @param Criteria $criteria
     * @param string $field
     * @return int $count
     */
    public function countByCriteria(Criteria $criteria = null, $field = 'id_user')
    {
        $criteria = (null === $criteria) ? new Criteria() : $criteria;
        try 
        {
            $sql = "SELECT COUNT( $field ) FROM ".User::TABLENAME."
                      INNER JOIN ".Person::TABLENAME." USING ( id_person )
                    WHERE " . $criteria->createSql();   
            $count = $this->db->fetchOne($sql);
        }
        catch(Zend_Db_Exception $e)
        {
            throw new UserException("Cant obtain the count \n" . $e->getMessage());
        }
        return $count;
    }
    
    /**
     * Método que construye un objeto User y lo rellena con la información del rowset
     * @param array $result El arreglo que devolvió el objeto Zend_Db despues del fetch
     * @return User 
     */
    private function getUserInstance($result)
    {
        //print_r($result);
        return UserFactory::createFromArray($result);
    }
  
    /**
     * Obtiene un UserCollection  dependiendo del idAccessRole
     * @param int $idAccessRole  
     * @return UserCollection 
     */
    public function getByIdAccessRole($idAccessRole)
    {
        $criteria = new Criteria();
        $criteria->add(User::ID_ACCESS_ROLE, $idAccessRole, Criteria::EQUAL);
        $userCollection = $this->getByCriteria($criteria);
        return $userCollection;
    }
  
    /**
     * Obtiene un UserCollection  dependiendo del idPerson
     * @param int $idPerson  
     * @return UserCollection 
     */
    public function getByIdPerson($idPerson)
    {
        $criteria = new Criteria();
        $criteria->add(User::ID_PERSON, $idPerson, Criteria::EQUAL);
        $userCollection = $this->getByCriteria($criteria);
        return $userCollection;
    }

    /**
     * Metodo que regresa una coleccion de objetos User con Status 'Active'
     * dependiendo del criterio establecido
     * @param Criteria $criteria
     * @return UserCollection $userCollection
     */
    public function getActives(Criteria $criteria = null)
    {
        $criteria = (null === $criteria) ? new Criteria() : $criteria;
        $criteria->add(User::STATUS, User::$Status['Active'], Criteria::EQUAL);
        return $this->getByCriteria($criteria);
    }
    
    /**
     * Metodo que regresa una coleccion de objetos User con Status 'Inactive'
     * dependiendo del criterio establecido
     * @param Criteria $criteria
     * @return UserCollection $userCollection
     */
    public function getInactives(Criteria $criteria = null)
    {
        $criteria = (null === $criteria) ? new Criteria() : $criteria;
        $criteria->add(User::STATUS, User::$Status['Inactive'], Criteria::EQUAL);
        return $this->getByCriteria($criteria);
    }
    
    /**
     * Activate a user
     * @param User $user
     */ 
    public function activate($user)
    {
        if(!($user instanceof User))
            throw new UserException("passed parameter isn't a User instance");
        if(User::$Status['Active'] != $user->getStatus())
        {
            $user->setStatus(User::$Status['Active']);
            $this->save($user);
        }
    }
    
    /**
     * Deactivate a user
     * @param User $user
     */ 
    public function deactivate($user)
    {
        if(!($user instanceof User))
            throw new UserException("passed parameter isn't a User instance");
        if(User::$Status['Inactive'] != $user->getStatus())
        {
            $user->setStatus(User::$Status['Inactive']);
            $this->save($user);
        }
    }


} 
 
