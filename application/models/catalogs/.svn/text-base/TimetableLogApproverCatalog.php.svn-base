<?php
/**
 * SRP
 *
 * SRP INELECTRA
 *
 * @category   lib
 * @package    lib_models
 * @copyright  Copyright (c) 2010 PCSMEXICO
 * @author     <arturo>, $LastChangedBy$
 * @version    1.0.2 SVN: $Id$
 */

/**
 * Dependences
 */
require_once "application/models/catalogs/TimetableLogCatalog.php";
require_once "application/models/beans/TimetableLogApprover.php";
require_once "application/models/exceptions/TimetableLogApproverException.php";
require_once "application/models/collections/TimetableLogApproverCollection.php";
require_once "application/models/factories/TimetableLogApproverFactory.php";

/**
 * Singleton TimetableLogApproverCatalog Class
 *
 * @category   lib
 * @package    lib_models
 * @subpackage lib_models_catalogs
 * @copyright  Copyright (c) 2010 PCSMEXICO
 * @copyright  This File has been proudly generated by Bender (http://code.google.com/p/bender-modeler/). <chentepixtol> <zetta>
 * @author     zetta & chentepixtol
 * @version    1.0.2 SVN: $Revision$
 */
class TimetableLogApproverCatalog extends TimetableLogCatalog
{

    /**
     * Singleton Instance
     * @var TimetableLogApproverCatalog
     */
    static protected $instance = null;


    /**
     * Método para obtener la instancia del catálogo
     * @return TimetableLogApproverCatalog
     */
    public static function getInstance()
    {
        if (!isset(self::$instance))
        {
          self::$instance = new self();
        }
        return self::$instance;
    }
    
    /**
     * Constructor de la clase TimetableLogApproverCatalog
     * @return TimetableLogApproverCatalog
     */
    protected function TimetableLogApproverCatalog()
    {
        parent::TimetableLogCatalog();
    }

    /**
     * Metodo para agregar un TimetableLogApprover a la base de datos
     * @param TimetableLogApprover $timetableLogApprover Objeto TimetableLogApprover
     */
    public function create($timetableLogApprover)
    {
        if(!($timetableLogApprover instanceof TimetableLogApprover))
            throw new TimetableLogApproverException("passed parameter isn't a TimetableLogApprover instance");
        try
        {
            if(!$timetableLogApprover->getIdTimetableLog())
              parent::create($timetableLogApprover);
            $data = array(
                'id_timetable_log' => $timetableLogApprover->getIdTimetableLog(),
                'id_current_approver' => $timetableLogApprover->getIdCurrentApprover(),
                'id_former_approver' => $timetableLogApprover->getIdFormerApprover(),
            );
            $data = array_filter($data, 'Catalog::notNull');
            $this->db->insert(TimetableLogApprover::TABLENAME, $data);
            $timetableLogApprover->setIdTimetableLogApprover($this->db->lastInsertId());
        }
        catch(Exception $e)
        {
            throw new TimetableLogApproverException("The TimetableLogApprover can't be saved \n" . $e->getMessage());
        }
    }

    /**
     * Metodo para Obtener los datos de un objeto por su llave primaria
     * @param int $idTimetableLogApprover
     * @param boolean $throw
     * @return TimetableLogApprover|null
     */
    public function getById($idTimetableLogApprover, $throw = false)
    {
        try
        {
            $criteria = new Criteria();
            $criteria->add(TimetableLogApprover::ID_TIMETABLE_LOG_APPROVER, $idTimetableLogApprover, Criteria::EQUAL);
            $newTimetableLogApprover = $this->getByCriteria($criteria)->getOne();
        }
        catch(Exception $e)
        {
            throw new TimetableLogApproverException("Can't obtain the TimetableLogApprover \n" . $e->getMessage());
        }
        if($throw && null == $newTimetableLogApprover)
            throw new TimetableLogApproverException("The TimetableLogApprover at $idTimetableLogApprover not exists ");
        return $newTimetableLogApprover;
    }
    
    /**
     * Metodo para Obtener una colección de objetos por varios ids
     * @param array $ids
     * @return TimetableLogApproverCollection
     */
    public function getByIds(array $ids)
    {
        if(null == $ids) return new TimetableLogApproverCollection();
        try
        {
            $criteria = new Criteria();
            $criteria->add(TimetableLogApprover::ID_TIMETABLE_LOG_APPROVER, $ids, Criteria::IN);
            $timetableLogApproverCollection = $this->getByCriteria($criteria);
        }
        catch(Exception $e)
        {
            throw new TimetableLogApproverException("TimetableLogApproverCollection can't be populated\n" . $e->getMessage());
        }
        return $timetableLogApproverCollection;
    }

    /**
     * Metodo para actualizar un TimetableLogApprover
     * @param TimetableLogApprover $timetableLogApprover 
     */
    public function update($timetableLogApprover)
    {
        if(!($timetableLogApprover instanceof TimetableLogApprover))
            throw new TimetableLogApproverException("passed parameter isn't a TimetableLogApprover instance");
        try
        {
            $where[] = "id_timetable_log_approver = '{$timetableLogApprover->getIdTimetableLogApprover()}'";
            $data = array(
                'id_timetable_log' => $timetableLogApprover->getIdTimetableLog(),
                'id_current_approver' => $timetableLogApprover->getIdCurrentApprover(),
                'id_former_approver' => $timetableLogApprover->getIdFormerApprover(),
            );
            $data = array_filter($data, 'Catalog::notNull');
            $this->db->update(TimetableLogApprover::TABLENAME, $data, $where);
            parent::update($timetableLogApprover);
        }
        catch(Exception $e)
        {
            throw new TimetableLogApproverException("The TimetableLogApprover can't be updated \n" . $e->getMessage());
        }
    }
    
    /**
     * Metodo para guardar un timetableLogApprover
     * @param TimetableLogApprover $timetableLogApprover
     */	
    public function save($timetableLogApprover)
    {
        if(!($timetableLogApprover instanceof TimetableLogApprover))
            throw new TimetableLogApproverException("passed parameter isn't a TimetableLogApprover instance");
        if(null != $timetableLogApprover->getIdTimetableLogApprover())
            $this->update($timetableLogApprover);
        else
            $this->create($timetableLogApprover);
    }

    /**
     * Metodo para eliminar un timetableLogApprover
     * @param TimetableLogApprover $timetableLogApprover
     */
    public function delete($timetableLogApprover)
    {
        if(!($timetableLogApprover instanceof TimetableLogApprover))
            throw new TimetableLogApproverException("passed parameter isn't a TimetableLogApprover instance");
        $this->deleteById($timetableLogApprover->getIdTimetableLogApprover());
        parent::delete($timetableLogApprover);
    }

    /**
     * Metodo para eliminar un TimetableLogApprover a partir de su Id
     * @param int $idTimetableLogApprover
     */
    public function deleteById($idTimetableLogApprover)
    {
        try
        {
            $where = array($this->db->quoteInto('id_timetable_log_approver = ?', $idTimetableLogApprover));
            $this->db->delete(TimetableLogApprover::TABLENAME, $where);
        }
        catch(Exception $e)
        {
            throw new TimetableLogApproverException("The TimetableLogApprover can't be deleted\n" . $e->getMessage());
        }
    }
    
    /**
     * Metodo para eliminar varios TimetableLogApprover a partir de su Id
     * @param array $ids
     */
    public function deleteByIds(array $ids)
    {
        try
        {
            $criteria = new Criteria();
            $criteria->add(TimetableLogApprover::ID_TIMETABLE_LOG_APPROVER, $ids, Criteria::IN);
            $this->db->delete(TimetableLogApprover::TABLENAME, array($criteria->createSql()));
        }
        catch(Exception $e)
        {
            throw new TimetableLogApproverException("Can't delete that\n" . $e->getMessage());
        }
    }
    
    /**
     * Metodo para Obtener todos los ids en un arreglo
     * @return array
     */
    public function retrieveAllIds()
    {
        return $this->getIdsByCriteria(new Criteria());
    }

    /**
     * Metodo para obtener todos los id de TimetableLogApprover por criterio
     * @param Criteria $criteria
     * @return array Array con todos los id de TimetableLogApprover que encajen en la busqueda
     */
    public function getIdsByCriteria(Criteria $criteria = null)
    {
        $criteria = (null === $criteria) ? new Criteria() : $criteria;
        return $this->getCustomFieldByCriteria(TimetableLogApprover::ID_TIMETABLE_LOG_APPROVER, $criteria);
    }

    /**
     * Metodo para obtener un campo en particular de un TimetableLogApprover dado un criterio
     * @param string $field
     * @param Criteria $criteria
     * @param $distinct
     * @return array Array con el campo de los objetos TimetableLogApprover que encajen en la busqueda
     */
    public function getCustomFieldByCriteria($field, Criteria $criteria = null, $distinct = false)
    { 
        $criteria = (null === $criteria) ? new Criteria() : $criteria;
        $distinct = $distinct ? 'DISTINCT' : '';
        try
        {
            $sql = "SELECT {$distinct} {$field}
                    FROM ".TimetableLogApprover::TABLENAME."
                      INNER JOIN ".TimetableLog::TABLENAME." USING ( id_timetable_log )
                    WHERE  " . $criteria->createSql();
            $result = $this->db->fetchCol($sql);
        } catch(Zend_Db_Exception $e)
        {
            throw new TimetableLogApproverException("No se pudieron obtener los fields de objetos TimetableLogApprover\n" . $e->getMessage());
        }
        return $result;
    }

    /**
     * Metodo que regresa una coleccion de objetos TimetableLogApprover 
     * dependiendo del criterio establecido
     * @param Criteria $criteria
     * @return TimetableLogApproverCollection $timetableLogApproverCollection
     */
    public function getByCriteria(Criteria $criteria = null)
    {
        $criteria = (null === $criteria) ? new Criteria() : $criteria;
        $this->db->setFetchMode(Zend_Db::FETCH_ASSOC);
        try 
        {
            $sql = "SELECT * FROM ".TimetableLogApprover::TABLENAME."
                      INNER JOIN ".TimetableLog::TABLENAME." USING ( id_timetable_log )
                    WHERE " . $criteria->createSql();
            $timetableLogApproverCollection = new TimetableLogApproverCollection();
            foreach ($this->db->fetchAll($sql) as $result){
                $timetableLogApproverCollection->append($this->getTimetableLogApproverInstance($result));
            }
        }
        catch(Zend_Db_Exception $e)
        {
            throw new TimetableLogApproverException("Cant obtain TimetableLogApproverCollection\n" . $e->getMessage());
        }
        return $timetableLogApproverCollection;
    }
    
    /**
     * Metodo que cuenta TimetableLogApprover 
     * dependiendo del criterio establecido
     * @param Criteria $criteria
     * @param string $field
     * @return int $count
     */
    public function countByCriteria(Criteria $criteria = null, $field = 'id_timetable_log_approver')
    {
        $criteria = (null === $criteria) ? new Criteria() : $criteria;
        try 
        {
            $sql = "SELECT COUNT( $field ) FROM ".TimetableLogApprover::TABLENAME."
                      INNER JOIN ".TimetableLog::TABLENAME." USING ( id_timetable_log )
                    WHERE " . $criteria->createSql();   
            $count = $this->db->fetchOne($sql);
        }
        catch(Zend_Db_Exception $e)
        {
            throw new TimetableLogApproverException("Cant obtain the count \n" . $e->getMessage());
        }
        return $count;
    }
    
    /**
     * Método que construye un objeto TimetableLogApprover y lo rellena con la información del rowset
     * @param array $result El arreglo que devolvió el objeto Zend_Db despues del fetch
     * @return TimetableLogApprover 
     */
    private function getTimetableLogApproverInstance($result)
    {
        return TimetableLogApproverFactory::createFromArray($result);
    }
  
    /**
     * Obtiene un TimetableLogApproverCollection  dependiendo del idTimetableLog
     * @param int $idTimetableLog  
     * @return TimetableLogApproverCollection 
     */
    public function getByIdTimetableLog($idTimetableLog)
    {
        $criteria = new Criteria();
        $criteria->add(TimetableLogApprover::ID_TIMETABLE_LOG, $idTimetableLog, Criteria::EQUAL);
        $timetableLogApproverCollection = $this->getByCriteria($criteria);
        return $timetableLogApproverCollection;
    }
  
    /**
     * Obtiene un TimetableLogApproverCollection  dependiendo del idCurrentApprover
     * @param int $idCurrentApprover  
     * @return TimetableLogApproverCollection 
     */
    public function getByIdCurrentApprover($idCurrentApprover)
    {
        $criteria = new Criteria();
        $criteria->add(TimetableLogApprover::ID_CURRENT_APPROVER, $idCurrentApprover, Criteria::EQUAL);
        $timetableLogApproverCollection = $this->getByCriteria($criteria);
        return $timetableLogApproverCollection;
    }
  
    /**
     * Obtiene un TimetableLogApproverCollection  dependiendo del idFormerApprover
     * @param int $idFormerApprover  
     * @return TimetableLogApproverCollection 
     */
    public function getByIdFormerApprover($idFormerApprover)
    {
        $criteria = new Criteria();
        $criteria->add(TimetableLogApprover::ID_FORMER_APPROVER, $idFormerApprover, Criteria::EQUAL);
        $timetableLogApproverCollection = $this->getByCriteria($criteria);
        return $timetableLogApproverCollection;
    }


} 
 
