<?php
/**
 * SRP
 *
 * Sistema de Registro de Planillas
 *
 * @category   lib
 * @package    lib_models
 * @copyright  Copyright (c) 2010 PCSMEXICO
 * @author     <marlen>, $LastChangedBy$
 * @version    1.0.0 SVN: $Id$
 */

/**
 * Dependences
 */
require_once "lib/db/Catalog.php";
require_once "application/models/beans/CalendarDay.php";
require_once "application/models/exceptions/CalendarDayException.php";
require_once "application/models/collections/CalendarDayCollection.php";
require_once "application/models/factories/CalendarDayFactory.php";

/**
 * Singleton CalendarDayCatalog Class
 *
 * @category   lib
 * @package    lib_models
 * @subpackage lib_models_catalogs
 * @copyright  Copyright (c) 2010 PCSMEXICO
 * @copyright  This File has been proudly generated by Bender (http://code.google.com/p/bender-modeler/). <chentepixtol> <zetta>
 * @author     zetta & chentepixtol
 * @version    1.0.0 SVN: $Revision$
 */
class CalendarDayCatalog extends Catalog
{

    /**
     * Singleton Instance
     * @var CalendarDayCatalog
     */
    static protected $instance = null;


    /**
     * Método para obtener la instancia del catálogo
     * @return CalendarDayCatalog
     */
    public static function getInstance()
    {
        if (!isset(self::$instance))
        {
          self::$instance = new self();
        }
        return self::$instance;
    }
    
    /**
     * Constructor de la clase CalendarDayCatalog
     * @return CalendarDayCatalog
     */
    protected function CalendarDayCatalog()
    {
        parent::Catalog();
    }

    /**
     * Metodo para agregar un CalendarDay a la base de datos
     * @param CalendarDay $calendarDay Objeto CalendarDay
     */
    public function create($calendarDay)
    {
        if(!($calendarDay instanceof CalendarDay))
            throw new CalendarDayException("passed parameter isn't a CalendarDay instance");
        try
        {
            $data = array(
                'id_employee' => $calendarDay->getIdEmployee(),
                'day_date' => $calendarDay->getDayDate(),
                'enabled_disabled' => $calendarDay->getEnabledDisabled(),
            );
            $data = array_filter($data, 'Catalog::notNull');
            $this->db->insert(CalendarDay::TABLENAME, $data);
            $calendarDay->setIdDay($this->db->lastInsertId());
        }
        catch(Exception $e)
        {
            throw new CalendarDayException("The CalendarDay can't be saved \n" . $e->getMessage());
        }
    }

    /**
     * Metodo para Obtener los datos de un objeto por su llave primaria
     * @param int $idDay
     * @return CalendarDay|null
     */
    public function getById($idDay)
    {
        try
        {
            $criteria = new Criteria();
            $criteria->add(CalendarDay::ID_DAY, $idDay, Criteria::EQUAL);
            $newCalendarDay = $this->getByCriteria($criteria)->getOne();
        }
        catch(Exception $e)
        {
            throw new CalendarDayException("Can't obtain the CalendarDay \n" . $e->getMessage());
        }
        return $newCalendarDay;
    }
    
	 /**
     * Metodo para Obtener los datos de un objeto por el empleado y fecha
     * @param int $idEmployee 
     * @param $dayDate
     * @return CalendarDay|null
     */
    public function getByidEmployeeAndDayDate($idEmployee, $dayDate)
    {
        try
        {
        	$criteria = new Criteria();
        	$criteria1 =new Criteria();
        	$criteria2 =new Criteria(); 
        	if($idEmployee == 0)
    			$criteria1->add(CalendarDay::ID_EMPLOYEE, 'NULL', Criteria::IS_NULL);
    		else
    		{           
            	$criteria1->add(CalendarDay::ID_EMPLOYEE, $idEmployee, Criteria::EQUAL);
    		}
            $criteria2->add(CalendarDay::DAY_DATE, $dayDate, Criteria::EQUAL);
            $criteria->addAnd($criteria1, $criteria2);
            $newCalendarDay = $this->getByCriteria($criteria)->getOne();
        }
        catch(Exception $e)
        {
            throw new CalendarDayException("Can't obtain the CalendarDay \n" . $e->getMessage());
        }
        return $newCalendarDay;
    }
    
    /**
     * Metodo para Obtener una colección de objetos por varios ids
     * @param array $ids
     * @return CalendarDayCollection
     */
    public function getByIds(array $ids)
    {
        if(null == $ids) return new CalendarDayCollection();
        try
        {
            $criteria = new Criteria();
            $criteria->add(CalendarDay::ID_DAY, $ids, Criteria::IN);
            $calendarDayCollection = $this->getByCriteria($criteria);
        }
        catch(Exception $e)
        {
            throw new CalendarDayException("CalendarDayCollection can't be populated\n" . $e->getMessage());
        }
        return $calendarDayCollection;
    }

    /**
     * Metodo para actualizar un CalendarDay
     * @param CalendarDay $calendarDay 
     */
    public function update($calendarDay)
    {
        if(!($calendarDay instanceof CalendarDay))
            throw new CalendarDayException("passed parameter isn't a CalendarDay instance");
        try
        {
            $where[] = "id_day = '{$calendarDay->getIdDay()}'";
            $data = array(
                'id_employee' => $calendarDay->getIdEmployee(),
                'day_date' => $calendarDay->getDayDate(),
                'enabled_disabled' => $calendarDay->getEnabledDisabled(),
            );
            $data = array_filter($data, 'Catalog::notNull');
            $this->db->update(CalendarDay::TABLENAME, $data, $where);
        }
        catch(Exception $e)
        {
            throw new CalendarDayException("The CalendarDay can't be updated \n" . $e->getMessage());
        }
    }
    
    /**
     * Metodo para guardar un calendarDay
     * @param CalendarDay $calendarDay
     */	
    public function save($calendarDay)
    {
        if(!($calendarDay instanceof CalendarDay))
            throw new CalendarDayException("passed parameter isn't a CalendarDay instance");
        if(null != $calendarDay->getIdDay())
            $this->update($calendarDay);
        else
            $this->create($calendarDay);
    }

    /**
     * Metodo para eliminar un calendarDay
     * @param CalendarDay $calendarDay
     */
    public function delete($calendarDay)
    {
        if(!($calendarDay instanceof CalendarDay))
            throw new CalendarDayException("passed parameter isn't a CalendarDay instance");
        $this->deleteById($calendarDay->getIdDay());
    }

    /**
     * Metodo para eliminar un CalendarDay a partir de su Id
     * @param int $idDay
     */
    public function deleteById($idDay)
    {
        try
        {
            $where = array($this->db->quoteInto('id_day = ?', $idDay));
            $this->db->delete(CalendarDay::TABLENAME, $where);
        }
        catch(Exception $e)
        {
            throw new CalendarDayException("The CalendarDay can't be deleted\n" . $e->getMessage());
        }
    }
    
    /**
     * Metodo para eliminar varios CalendarDay a partir de su Id
     * @param array $ids
     */
    public function deleteByIds(array $ids)
    {
        try
        {
            $criteria = new Criteria();
            $criteria->add(CalendarDay::ID_DAY, $ids, Criteria::IN);
            $this->db->delete(CalendarDay::TABLENAME, array($criteria->createSql()));
        }
        catch(Exception $e)
        {
            throw new CalendarDayException("Can't delete that\n" . $e->getMessage());
        }
    }
    
    /**
     * Metodo para Obtener todos los ids en un arreglo
     * @return array
     */
    public function retrieveAllIds()
    {
        return $this->getIdsByCriteria(new Criteria());
    }

    /**
     * Metodo para obtener todos los id de CalendarDay por criterio
     * @param Criteria $criteria
     * @return array Array con todos los id de CalendarDay que encajen en la busqueda
     */
    public function getIdsByCriteria(Criteria $criteria = null)
    {
        $criteria = (null === $criteria) ? new Criteria() : $criteria;
        return $this->getCustomFieldByCriteria(CalendarDay::ID_DAY, $criteria);
    }

    /**
     * Metodo para obtener un campo en particular de un CalendarDay dado un criterio
     * @param string $field
     * @param Criteria $criteria
     * @return array Array con el campo de los objetos CalendarDay que encajen en la busqueda
     */
    public function getCustomFieldByCriteria($field, Criteria $criteria = null)
    { 
        $criteria = (null === $criteria) ? new Criteria() : $criteria;
        try
        {
            $sql = "SELECT {$field}
                    FROM ".CalendarDay::TABLENAME."
                    WHERE  " . $criteria->createSql();
            $result = $this->db->fetchCol($sql);
        } catch(Zend_Db_Exception $e)
        {
            throw new CalendarDayException("No se pudieron obtener los ids de objetos CalendarDay\n" . $e->getMessage());
        }
        return $result;
    }
    
	/**
     * Metodo para obtener todos los date_date de CalendarDay por criterio
     * @param Criteria $criteria
     * @return array Array con todos los date_date de CalendarDay que encajen en la busqueda
     */
    public function getDayDateByCriteria(Criteria $criteria = null)
    {
        $criteria = (null === $criteria) ? new Criteria() : $criteria;
        return $this->getCustomFieldByCriteria(CalendarDay::DAY_DATE, $criteria);
    }

    /**
     * Metodo que regresa una coleccion de objetos CalendarDay 
     * dependiendo del criterio establecido
     * @param Criteria $criteria
     * @return CalendarDayCollection $calendarDayCollection
     */
    public function getByCriteria(Criteria $criteria = null)
    {
        $criteria = (null === $criteria) ? new Criteria() : $criteria;
        $this->db->setFetchMode(Zend_Db::FETCH_ASSOC);
        try 
        {
            $sql = "SELECT * FROM ".CalendarDay::TABLENAME."
                    WHERE " . $criteria->createSql();
            $calendarDayCollection = new CalendarDayCollection();
            foreach ($this->db->fetchAll($sql) as $result){
                $calendarDayCollection->append($this->getCalendarDayInstance($result));
            }
        
            //die($sql);
        }
        
        catch(Zend_Db_Exception $e)
        {
            throw new CalendarDayException("Cant obtain CalendarDayCollection\n" . $e->getMessage());
        }
        return $calendarDayCollection;
    }
    
	/**
     * Metodo que regresa una coleccion de objetos CalendarDay 
     * dependiendo del criterio establecido
     * @param Criteria $criteria
     * @return CalendarDayCollection $calendarDayCollection
     */
    public function getEmployeeDistinct(Criteria $criteria = null)
    {
        $criteria = (null === $criteria) ? new Criteria() : $criteria;
        $this->db->setFetchMode(Zend_Db::FETCH_ASSOC);
        try 
        {
            $sql = "SELECT DISTINCT `id_employee` FROM ".CalendarDay::TABLENAME."
                    WHERE " . $criteria->createSql();
            $result = $this->db->fetchCol($sql);
        } catch(Zend_Db_Exception $e)
        {
            throw new CalendarDayException("No se pudieron obtener los ids de objetos CalendarDay\n" . $e->getMessage());
        }
        return $result;
    }
    /**
     * Metodo que cuenta CalendarDay 
     * dependiendo del criterio establecido
     * @param Criteria $criteria
     * @param string $field
     * @return int $count
     */
    public function countByCriteria(Criteria $criteria = null, $field = 'id_day')
    {
        $criteria = (null === $criteria) ? new Criteria() : $criteria;
        try 
        {
            $sql = "SELECT COUNT( $field ) FROM ".CalendarDay::TABLENAME."
                    WHERE " . $criteria->createSql();   
            $count = $this->db->fetchOne($sql);
        }
        catch(Zend_Db_Exception $e)
        {
            throw new CalendarDayException("Cant obtain the count \n" . $e->getMessage());
        }
        return $count;
    }
    
    /**
     * Método que construye un objeto CalendarDay y lo rellena con la información del rowset
     * @param array $result El arreglo que devolvió el objeto Zend_Db despues del fetch
     * @return CalendarDay 
     */
    private function getCalendarDayInstance($result)
    {
        return CalendarDayFactory::createFromArray($result);
    }
  
    /**
     * Obtiene un CalendarDayCollection  dependiendo del idEmployee
     * @param int $idEmployee  
     * @return CalendarDayCollection 
     */
    public function getByIdEmployee($idEmployee)
    {
        $criteria = new Criteria();
        $criteria->add(CalendarDay::ID_EMPLOYEE, $idEmployee, Criteria::EQUAL);
        $calendarDayCollection = $this->getByCriteria($criteria);
        return $calendarDayCollection;
    }

    public function getByIdEmployeeAndDate($idEmployee, $toDate, $fromDate){
        $criteria = new Criteria();
        $criteria->add(CalendarDay::ID_EMPLOYEE, $idEmployee, Criteria::EQUAL);
        $criteria->add(CalendarDay::DAY_DATE, array($fromDate, $toDate) , Criteria::BETWEEN);
        $calendarDayCollection = $this->getByCriteria($criteria);
        return $calendarDayCollection;
    }


} 
 
