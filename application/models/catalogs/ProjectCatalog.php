<?php

/**
 * SRP
 *
 * SRP INELECTRA
 *
 * @category   lib
 * @package    lib_models
 * @copyright  Copyright (c) 2010 PCSMEXICO
 * @author     <arturo>, $LastChangedBy$
 * @version    1.0.2 SVN: $Id$
 */
/**
 * Dependences
 */
require_once "lib/db/Catalog.php";
require_once "application/models/beans/Project.php";
require_once "application/models/exceptions/ProjectException.php";
require_once "application/models/collections/ProjectCollection.php";
require_once "application/models/factories/ProjectFactory.php";

/**
 * Singleton ProjectCatalog Class
 *
 * @category   lib
 * @package    lib_models
 * @subpackage lib_models_catalogs
 * @copyright  Copyright (c) 2010 PCSMEXICO
 * @copyright  This File has been proudly generated by Bender (http://code.google.com/p/bender-modeler/). <chentepixtol> <zetta>
 * @author     zetta & chentepixtol
 * @version    1.0.2 SVN: $Revision$
 */
class ProjectCatalog extends Catalog {

    /**
     * Singleton Instance
     * @var ProjectCatalog
     */
    static protected $instance = null;

    /**
     * Método para obtener la instancia del catálogo
     * @return ProjectCatalog
     */
    public static function getInstance() {
        if (!isset(self::$instance)) {
            self::$instance = new self();
        }
        return self::$instance;
    }

    /**
     * Constructor de la clase ProjectCatalog
     * @return ProjectCatalog
     */
    protected function ProjectCatalog() {
        parent::Catalog();
    }

    /**
     * Metodo para agregar un Project a la base de datos
     * @param Project $project Objeto Project
     */
    public function create($project) {
        if (!($project instanceof Project))
            throw new ProjectException("passed parameter isn't a Project instance");
        try {
            $data = array(
                'type' => $project->getType(),
                'status' => $project->getStatus(),
            );
            $data = array_filter($data, 'Catalog::notNull');
            $this->db->insert(Project::TABLENAME, $data);
            $project->setIdProject($this->db->lastInsertId());
        } catch (Exception $e) {
            throw new ProjectException("The Project can't be saved \n" . $e->getMessage());
        }
    }

    /**
     * Metodo para Obtener los datos de un objeto por su llave primaria
     * @param int $idProject
     * @param boolean $throw
     * @return Project|null
     */
    public function getById($idProject, $throw = false) {
        try {
            $criteria = new Criteria();
            $criteria->add(Project::ID_PROJECT, $idProject, Criteria::EQUAL);
            $newProject = $this->getByCriteria($criteria)->getOne();
        } catch (Exception $e) {
            throw new ProjectException("Can't obtain the Project \n" . $e->getMessage());
        }
        if ($throw && null == $newProject)
            throw new ProjectException("The Project at $idProject not exists ");
        return $newProject;
    }

    /**
     * Metodo para Obtener una colección de objetos por varios ids
     * @param array $ids
     * @return ProjectCollection
     */
    public function getByIds(array $ids) {
        if (null == $ids)
            return new ProjectCollection();
        try {
            $criteria = new Criteria();
            $criteria->add(Project::ID_PROJECT, $ids, Criteria::IN);
            $projectCollection = $this->getByCriteria($criteria);
        } catch (Exception $e) {
            throw new ProjectException("ProjectCollection can't be populated\n" . $e->getMessage());
        }
        return $projectCollection;
    }

    /**
     * Metodo para actualizar un Project
     * @param Project $project
     */
    public function update($project) {
        if (!($project instanceof Project))
            throw new ProjectException("passed parameter isn't a Project instance");
        try {
            $where[] = "id_project = '{$project->getIdProject()}'";
            $data = array(
                'type' => $project->getType(),
                'status' => $project->getStatus(),
            );
            $data = array_filter($data, 'Catalog::notNull');
            $this->db->update(Project::TABLENAME, $data, $where);
        } catch (Exception $e) {
            throw new ProjectException("The Project can't be updated \n" . $e->getMessage());
        }
    }

    /**
     * Metodo para guardar un project
     * @param Project $project
     */
    public function save($project) {
        if (!($project instanceof Project))
            throw new ProjectException("passed parameter isn't a Project instance");
        if (null != $project->getIdProject())
            $this->update($project);
        else
            $this->create($project);
    }

    /**
     * Metodo para eliminar un project
     * @param Project $project
     */
    public function delete($project) {
        if (!($project instanceof Project))
            throw new ProjectException("passed parameter isn't a Project instance");
        $this->deleteById($project->getIdProject());
    }

    /**
     * Metodo para eliminar un Project a partir de su Id
     * @param int $idProject
     */
    public function deleteById($idProject) {
        try {
            $where = array($this->db->quoteInto('id_project = ?', $idProject));
            $this->db->delete(Project::TABLENAME, $where);
        } catch (Exception $e) {
            throw new ProjectException("The Project can't be deleted\n" . $e->getMessage());
        }
    }

    /**
     * Metodo para eliminar varios Project a partir de su Id
     * @param array $ids
     */
    public function deleteByIds(array $ids) {
        try {
            $criteria = new Criteria();
            $criteria->add(Project::ID_PROJECT, $ids, Criteria::IN);
            $this->db->delete(Project::TABLENAME, array($criteria->createSql()));
        } catch (Exception $e) {
            throw new ProjectException("Can't delete that\n" . $e->getMessage());
        }
    }

    /**
     * Metodo para Obtener todos los ids en un arreglo
     * @return array
     */
    public function retrieveAllIds() {
        return $this->getIdsByCriteria(new Criteria());
    }

    /**
     * Metodo para obtener todos los id de Project por criterio
     * @param Criteria $criteria
     * @return array Array con todos los id de Project que encajen en la busqueda
     */
    public function getIdsByCriteria(Criteria $criteria = null) {
        $criteria = (null === $criteria) ? new Criteria() : $criteria;
        return $this->getCustomFieldByCriteria(Project::ID_PROJECT, $criteria);
    }

    /**
     * Metodo para obtener un campo en particular de un Project dado un criterio
     * @param string $field
     * @param Criteria $criteria
     * @param $distinct
     * @return array Array con el campo de los objetos Project que encajen en la busqueda
     */
    public function getCustomFieldByCriteria($field, Criteria $criteria = null, $distinct = false) {
        $criteria = (null === $criteria) ? new Criteria() : $criteria;
        $distinct = $distinct ? 'DISTINCT' : '';
        try {
            $sql = "SELECT {$distinct} {$field}
                    FROM " . Project::TABLENAME . "
                    WHERE  " . $criteria->createSql();
            $result = $this->db->fetchCol($sql);
        } catch (Zend_Db_Exception $e) {
            throw new ProjectException("No se pudieron obtener los fields de objetos Project\n" . $e->getMessage());
        }
        return $result;
    }

    /**
     * Metodo que regresa una coleccion de objetos Project
     * dependiendo del criterio establecido
     * @param Criteria $criteria
     * @return ProjectCollection $projectCollection
     */
    public function getByCriteria(Criteria $criteria = null) {
        $criteria = (null === $criteria) ? new Criteria() : $criteria;
        $this->db->setFetchMode(Zend_Db::FETCH_ASSOC);
        try {
            $sql = "SELECT * FROM " . Project::TABLENAME . "
                    WHERE " . $criteria->createSql();
            $projectCollection = new ProjectCollection();
            foreach ($this->db->fetchAll($sql) as $result) {
                $projectCollection->append($this->getProjectInstance($result));
            }
        } catch (Zend_Db_Exception $e) {
            throw new ProjectException("Cant obtain ProjectCollection\n" . $e->getMessage());
        }
        return $projectCollection;
    }

    /**
     * Metodo que cuenta Project
     * dependiendo del criterio establecido
     * @param Criteria $criteria
     * @param string $field
     * @return int $count
     */
    public function countByCriteria(Criteria $criteria = null, $field = 'id_project') {
        $criteria = (null === $criteria) ? new Criteria() : $criteria;
        try {
            $sql = "SELECT COUNT( $field ) FROM " . Project::TABLENAME . "
                    WHERE " . $criteria->createSql();
            $count = $this->db->fetchOne($sql);
        } catch (Zend_Db_Exception $e) {
            throw new ProjectException("Cant obtain the count \n" . $e->getMessage());
        }
        return $count;
    }

    /**
     * Método que construye un objeto Project y lo rellena con la información del rowset
     * @param array $result El arreglo que devolvió el objeto Zend_Db despues del fetch
     * @return Project
     */
    private function getProjectInstance($result) {
        return ProjectFactory::createFromArray($result);
    }

    /**
     * Metodo que regresa una coleccion de objetos Project con Status 'Active'
     * dependiendo del criterio establecido
     * @param Criteria $criteria
     * @return ProjectCollection $projectCollection
     */
    public function getActives(Criteria $criteria = null) {
        $criteria = (null === $criteria) ? new Criteria() : $criteria;
        $criteria->add(Project::STATUS, Project::$Status['Active'], Criteria::EQUAL);
        return $this->getByCriteria($criteria);
    }

    /**
     * Metodo que regresa una coleccion de objetos Project con Status 'Inactive'
     * dependiendo del criterio establecido
     * @param Criteria $criteria
     * @return ProjectCollection $projectCollection
     */
    public function getInactives(Criteria $criteria = null) {
        $criteria = (null === $criteria) ? new Criteria() : $criteria;
        $criteria->add(Project::STATUS, Project::$Status['Inactive'], Criteria::EQUAL);
        return $this->getByCriteria($criteria);
    }

    /**
     * Metodo que regresa una coleccion de objetos Project con Status 'Inactive'
     * dependiendo del criterio establecido
     * @param Criteria $criteria
     * @return Array
     */
    public function getActivesDepartments(Criteria $criteria = null) {
        $criteria = (null === $criteria) ? new Criteria() : $criteria;
        $criteria->add(Project::STATUS, Project::$Status['Active'], Criteria::EQUAL);
        try {
            $sql = $this->db->select();
            $sql->from(Project::TABLENAME)
                    ->join(DepartmentProject::TABLENAME, Project::ID_PROJECT."=".DepartmentProject::ID_PROJECT)
                    ->join(Department::TABLENAME, DepartmentProject::ID_DEPARTMENT . "=" . Department::ID_DEPARTMENT, Department::DEPARTMENT_NAME)
                    ->where($criteria->createSql());
            return $this->db->fetchAll($sql);

        } catch (Zend_Db_Exception $e) {
            throw new ProjectException("Cant obtain ProjectCollection\n" . $e->getMessage());
        }
        return $projectCollection;
    }

    /**
     * Activate a project
     * @param Project $project
     */
    public function activate($project) {
        if (!($project instanceof Project))
            throw new ProjectException("passed parameter isn't a Project instance");
        if (Project::$Status['Active'] != $project->getStatus()) {
            $project->setStatus(Project::$Status['Active']);
            $this->save($project);
        }
    }

    /**
     * Deactivate a project
     * @param Project $project
     */
    public function deactivate($project) {
        if (!($project instanceof Project))
            throw new ProjectException("passed parameter isn't a Project instance");
        if (Project::$Status['Inactive'] != $project->getStatus()) {
            $project->setStatus(Project::$Status['Inactive']);
            $this->save($project);
        }
    }

    /**
     * Link a Project to Employee
     * @param int $idProject
     * @param int $idEmployee
     * @param  $isMain
     * @param  $level
     */
    public function linkToEmployee($idProject, $idEmployee, $isMain, $level) {
        try {
            $this->unlinkFromEmployee($idProject, $idEmployee);
            $data = array(
                'id_project' => $idProject,
                'id_employee' => $idEmployee,
                'is_main' => $isMain,
                'level' => $level,
            );
            $this->db->insert(Project::TABLENAME_PROJECT_EMPLOYEE, $data);
        } catch (Exception $e) {
            throw new ProjectException("Can't link Project to Employee\n" . $e->getMessage());
        }
    }

    /**
     * Unlink a Project from Employee
     * @param int $idProject
     * @param int $idEmployee
     */
    public function unlinkFromEmployee($idProject, $idEmployee) {
        try {
            $where = array(
                $this->db->quoteInto('id_project = ?', $idProject),
                $this->db->quoteInto('id_employee = ?', $idEmployee),
            );
            $this->db->delete(Project::TABLENAME_PROJECT_EMPLOYEE, $where);
        } catch (Exception $e) {
            throw new ProjectException("Can't unlink Project to Employee\n" . $e->getMessage());
        }
    }

    /**
     * Unlink all Employee relations
     * @param int $idProject
     * @param  $isMain
     * @param  $level
     */
    public function unlinkAllEmployeeRelations($idProject, $isMain = null, $level = null) {
        try {
            $where = array(
                $this->db->quoteInto('id_project = ?', $idProject),
            );
            if (null != $isMain)
                $where[] = $this->db->quoteInto('is_main = ?', $isMain);
            if (null != $level)
                $where[] = $this->db->quoteInto('level = ?', $level);
            $this->db->delete(Project::TABLENAME_PROJECT_EMPLOYEE, $where);
        } catch (Exception $e) {
            throw new ProjectException("Can't unlink all Employee relations \n" . $e->getMessage());
        }
    }

    /**
     * Get Project - Employee relations by Criteria
     * @param Criteria $criteria
     * @return array
     */
    public function getProjectEmployeeRelations(Criteria $criteria = null) {
        $criteria = (null === $criteria) ? new Criteria() : $criteria;
        $this->db->setFetchMode(Zend_Db::FETCH_ASSOC);
        try {
            $sql = "SELECT * FROM " . Project::TABLENAME_PROJECT_EMPLOYEE . "
                   WHERE  " . $criteria->createSql();
            $result = $this->db->fetchAll($sql);
        } catch (Exception $e) {
            throw new ProjectException("Can't obtain relations by criteria\n" . $e->getMessage().$sql);
        }
        return $result;
    }
    
	public function getIdProjectByIdEmployee($idEmployee) {
        try {
            $sql = "SELECT id_project FROM " . Project::TABLENAME_PROJECT_EMPLOYEE . "
                   WHERE  id_employee = " . $idEmployee;
            $result = $this->db->fetchAll($sql);
        } catch (Exception $e) {
            throw new ProjectException("Can't obtain relations by criteria\n" . $e->getMessage());
        }
        return $result;
    }

    /**
     * Get ProjectCollection by Employee
     * @param int $idEmployee
     * @param [|array] $isMain
     * @param [|array] $level
     * @return ProjectCollection
     */
    public function getByEmployee($idEmployee, $isMain = null, $level = null) {
        $criteria = new Criteria();
        $criteria->add('id_employee', $idEmployee, Criteria::EQUAL);
        if (null != $isMain)
            $criteria->add('is_main', $isMain, is_array($isMain) ? Criteria::IN : Criteria::EQUAL);
        if (null != $level)
            $criteria->add('level', $level, is_array($level) ? Criteria::IN : Criteria::EQUAL);
        $projectEmployee = $this->getProjectEmployeeRelations($criteria);
        $ids = array();
        foreach ($projectEmployee as $rs) {
            $ids[] = $rs['id_project'];
        }
        return $this->getByIds($ids);
    }

    /**
     * Obtiene la relacion entre project y employee
     * @return array
     */
    public function getAllPermissions() {
        $permissions = array();
        foreach ($this->getProjectEmployeeRelations() as $projectEmployee) {
            if (($projectEmployee['is_main'] == 1) && ($projectEmployee['level'] == 1)) {
                $permissions[$projectEmployee['id_employee']][$projectEmployee['id_project']] = 1;
            }
            if (($projectEmployee['is_main'] == 0) && ($projectEmployee['level'] == 1)) {
                $permissions[$projectEmployee['id_employee']][$projectEmployee['id_project']] = 2;
            }
            if (($projectEmployee['is_main'] == 1) && ($projectEmployee['level'] == 2)) {
                $permissions[$projectEmployee['id_employee']][$projectEmployee['id_project']] = 3;
            }
            if (($projectEmployee['is_main'] == 0) && ($projectEmployee['level'] == 2)) {
                $permissions[$projectEmployee['id_employee']][$projectEmployee['id_project']] = 4;
            }
        }
        return $permissions;
    }
    
    /*
     * 
     */
	public function getApproverLevel1($idProject)
	{
		 try {
            $sql = "SELECT id_employee FROM " . Project::TABLENAME_PROJECT_EMPLOYEE . "
                   WHERE  id_project = '" . $idProject."' 
                   AND is_main = 1 	
                   AND level = 1";
            //$result = $this->db->fetchAll($sql);
            list($id_employee) = $this->db->fetchCol($sql);
            $result = $id_employee;
        } catch (Exception $e) {
            throw new ProjectException("Can't obtain relations by criteria\n" . $e->getMessage().$sql);
        }
        return $result;
	}
	
 	/*
     * 
     */
	public function getApproverLevel2($idProject)
	{
		 try {
            $sql = "SELECT id_employee FROM " . Project::TABLENAME_PROJECT_EMPLOYEE . "
                   WHERE  id_project = '" . $idProject."' 
                   AND is_main = 1 	
                   AND level = 2";
            list($id_employee) = $this->db->fetchCol($sql);
            $result = $id_employee;
        } catch (Exception $e) {
            throw new ProjectException("Can't obtain relations by criteria\n" . $e->getMessage().$sql);
        }
        return $result;
	}
	
	public function getApproverLevel12($idProject)
	{
		 try {
            $sql = "SELECT id_employee FROM " . Project::TABLENAME_PROJECT_EMPLOYEE . "
                   WHERE  id_project = '" . $idProject."' 
                   AND is_main = 0 	
                   AND level = 1";
            list($id_employee) = $this->db->fetchCol($sql);
            $result = $id_employee;
        } catch (Exception $e) {
            throw new ProjectException("Can't obtain relations by criteria\n" . $e->getMessage().$sql);
        }
        return $result;
	}
	
	public function getApproverLevel22($idProject)
	{
		 try {
            $sql = "SELECT id_employee FROM " . Project::TABLENAME_PROJECT_EMPLOYEE . "
                   WHERE  id_project = '" . $idProject."' 
                   AND is_main = 0 	
                   AND level = 2";
            list($id_employee) = $this->db->fetchCol($sql);
            $result = $id_employee;
        } catch (Exception $e) {
            throw new ProjectException("Can't obtain relations by criteria\n" . $e->getMessage().$sql);
        }
        return $result;
	}
}
