<?php
/**
 * SRP
 *
 * SRP INELECTRA
 *
 * @category   lib
 * @package    lib_models
 * @copyright  Copyright (c) 2010 PCSMEXICO
 * @author     <arturo>, $LastChangedBy$
 * @version    1.0.2 SVN: $Id$
 */

/**
 * Dependences
 */
require_once "lib/db/Catalog.php";
require_once "application/models/beans/Person.php";
require_once "application/models/exceptions/PersonException.php";
require_once "application/models/collections/PersonCollection.php";
require_once "application/models/factories/PersonFactory.php";

/**
 * Singleton PersonCatalog Class
 *
 * @category   lib
 * @package    lib_models
 * @subpackage lib_models_catalogs
 * @copyright  Copyright (c) 2010 PCSMEXICO
 * @copyright  This File has been proudly generated by Bender (http://code.google.com/p/bender-modeler/). <chentepixtol> <zetta>
 * @author     zetta & chentepixtol
 * @version    1.0.2 SVN: $Revision$
 */
class PersonCatalog extends Catalog
{

    /**
     * Singleton Instance
     * @var PersonCatalog
     */
    static protected $instance = null;


    /**
     * Método para obtener la instancia del catálogo
     * @return PersonCatalog
     */
    public static function getInstance()
    {
        if (!isset(self::$instance))
        {
          self::$instance = new self();
        }
        return self::$instance;
    }
    
    /**
     * Constructor de la clase PersonCatalog
     * @return PersonCatalog
     */
    protected function PersonCatalog()
    {
        parent::Catalog();
    }

    /**
     * Metodo para agregar un Person a la base de datos
     * @param Person $person Objeto Person
     */
    public function create($person)
    {
        if(!($person instanceof Person))
            throw new PersonException("passed parameter isn't a Person instance");
        try
        {
            $data = array(
                'name' => $person->getName(),
                'middle_name' => $person->getMiddleName(),
                'last_name' => $person->getLastName(),
                'birthdate' => $person->getBirthdate(),
                'ssn' => $person->getSsn(),
                'genre' => $person->getGenre(),
                'marital_status' => $person->getMaritalStatus(),
                'curp' => $person->getCurp(),
                'nationality' => $person->getNationality(),
                'id_fiscal_entity' => $person->getIdFiscalEntity(),
            );
            $data = array_filter($data, 'Catalog::notNull');
            $this->db->insert(Person::TABLENAME, $data);
            $person->setIdPerson($this->db->lastInsertId());
        }
        catch(Exception $e)
        {
            throw new PersonException("The Person can't be saved \n" . $e->getMessage());
        }
    }

    /**
     * Metodo para Obtener los datos de un objeto por su llave primaria
     * @param int $idPerson
     * @param boolean $throw
     * @return Person|null
     */
    public function getById($idPerson, $throw = false)
    {
        try
        {
            $criteria = new Criteria();
            $criteria->add(Person::ID_PERSON, $idPerson, Criteria::EQUAL);
            $newPerson = $this->getByCriteria($criteria)->getOne();
        }
        catch(Exception $e)
        {
            throw new PersonException("Can't obtain the Person \n" . $e->getMessage());
        }
        if($throw && null == $newPerson)
            throw new PersonException("The Person at $idPerson not exists ");
        return $newPerson;
    }
    
    /**
     * Metodo para Obtener una colección de objetos por varios ids
     * @param array $ids
     * @return PersonCollection
     */
    public function getByIds(array $ids)
    {
        if(null == $ids) return new PersonCollection();
        try
        {
            $criteria = new Criteria();
            $criteria->add(Person::ID_PERSON, $ids, Criteria::IN);
            $personCollection = $this->getByCriteria($criteria);
        }
        catch(Exception $e)
        {
            throw new PersonException("PersonCollection can't be populated\n" . $e->getMessage());
        }
        return $personCollection;
    }

    /**
     * Metodo para actualizar un Person
     * @param Person $person 
     */
    public function update($person)
    {
        if(!($person instanceof Person))
            throw new PersonException("passed parameter isn't a Person instance");
        try
        {
            $where[] = "id_person = '{$person->getIdPerson()}'";
            $data = array(
                'name' => $person->getName(),
                'middle_name' => $person->getMiddleName(),
                'last_name' => $person->getLastName(),
                'birthdate' => $person->getBirthdate(),
                'ssn' => $person->getSsn(),
                'genre' => $person->getGenre(),
                'marital_status' => $person->getMaritalStatus(),
                'curp' => $person->getCurp(),
                'nationality' => $person->getNationality(),
                'id_fiscal_entity' => $person->getIdFiscalEntity(),
            );
            $data = array_filter($data, 'Catalog::notNull');
            $this->db->update(Person::TABLENAME, $data, $where);
        }
        catch(Exception $e)
        {
            throw new PersonException("The Person can't be updated \n" . $e->getMessage());
        }
    }
    
    /**
     * Metodo para guardar un person
     * @param Person $person
     */	
    public function save($person)
    {
        if(!($person instanceof Person))
            throw new PersonException("passed parameter isn't a Person instance");
        if(null != $person->getIdPerson())
            $this->update($person);
        else
            $this->create($person);
    }

    /**
     * Metodo para eliminar un person
     * @param Person $person
     */
    public function delete($person)
    {
        if(!($person instanceof Person))
            throw new PersonException("passed parameter isn't a Person instance");
        $this->deleteById($person->getIdPerson());
    }

    /**
     * Metodo para eliminar un Person a partir de su Id
     * @param int $idPerson
     */
    public function deleteById($idPerson)
    {
        try
        {
            $where = array($this->db->quoteInto('id_person = ?', $idPerson));
            $this->db->delete(Person::TABLENAME, $where);
        }
        catch(Exception $e)
        {
            throw new PersonException("The Person can't be deleted\n" . $e->getMessage());
        }
    }
    
    /**
     * Metodo para eliminar varios Person a partir de su Id
     * @param array $ids
     */
    public function deleteByIds(array $ids)
    {
        try
        {
            $criteria = new Criteria();
            $criteria->add(Person::ID_PERSON, $ids, Criteria::IN);
            $this->db->delete(Person::TABLENAME, array($criteria->createSql()));
        }
        catch(Exception $e)
        {
            throw new PersonException("Can't delete that\n" . $e->getMessage());
        }
    }
    
    /**
     * Metodo para Obtener todos los ids en un arreglo
     * @return array
     */
    public function retrieveAllIds()
    {
        return $this->getIdsByCriteria(new Criteria());
    }

    /**
     * Metodo para obtener todos los id de Person por criterio
     * @param Criteria $criteria
     * @return array Array con todos los id de Person que encajen en la busqueda
     */
    public function getIdsByCriteria(Criteria $criteria = null)
    {
        $criteria = (null === $criteria) ? new Criteria() : $criteria;
        return $this->getCustomFieldByCriteria(Person::ID_PERSON, $criteria);
    }

    /**
     * Metodo para obtener un campo en particular de un Person dado un criterio
     * @param string $field
     * @param Criteria $criteria
     * @param $distinct
     * @return array Array con el campo de los objetos Person que encajen en la busqueda
     */
    public function getCustomFieldByCriteria($field, Criteria $criteria = null, $distinct = false)
    { 
        $criteria = (null === $criteria) ? new Criteria() : $criteria;
        $distinct = $distinct ? 'DISTINCT' : '';
        try
        {
            $sql = "SELECT {$distinct} {$field}
                    FROM ".Person::TABLENAME."
                    WHERE  " . $criteria->createSql();
            $result = $this->db->fetchCol($sql);
        } catch(Zend_Db_Exception $e)
        {
            throw new PersonException("No se pudieron obtener los fields de objetos Person\n" . $e->getMessage());
        }
        return $result;
    }

    /**
     * Metodo que regresa una coleccion de objetos Person 
     * dependiendo del criterio establecido
     * @param Criteria $criteria
     * @return PersonCollection $personCollection
     */
    public function getByCriteria(Criteria $criteria = null)
    {
        $criteria = (null === $criteria) ? new Criteria() : $criteria;
        $this->db->setFetchMode(Zend_Db::FETCH_ASSOC);
        try 
        {
            $sql = "SELECT * FROM ".Person::TABLENAME."
                    WHERE " . $criteria->createSql();
            $personCollection = new PersonCollection();
            foreach ($this->db->fetchAll($sql) as $result){
                $personCollection->append($this->getPersonInstance($result));
            }
        }
        catch(Zend_Db_Exception $e)
        {
            throw new PersonException("Cant obtain PersonCollection\n" . $e->getMessage());
        }
        return $personCollection;
    }
    
    /**
     * Metodo que cuenta Person 
     * dependiendo del criterio establecido
     * @param Criteria $criteria
     * @param string $field
     * @return int $count
     */
    public function countByCriteria(Criteria $criteria = null, $field = 'id_person')
    {
        $criteria = (null === $criteria) ? new Criteria() : $criteria;
        try 
        {
            $sql = "SELECT COUNT( $field ) FROM ".Person::TABLENAME."
                    WHERE " . $criteria->createSql();   
            $count = $this->db->fetchOne($sql);
        }
        catch(Zend_Db_Exception $e)
        {
            throw new PersonException("Cant obtain the count \n" . $e->getMessage());
        }
        return $count;
    }
    
    /**
     * Método que construye un objeto Person y lo rellena con la información del rowset
     * @param array $result El arreglo que devolvió el objeto Zend_Db despues del fetch
     * @return Person 
     */
    private function getPersonInstance($result)
    {
        return PersonFactory::createFromArray($result);
    }
  
    /**
     * Obtiene un PersonCollection  dependiendo del idFiscalEntity
     * @param int $idFiscalEntity  
     * @return PersonCollection 
     */
    public function getByIdFiscalEntity($idFiscalEntity)
    {
        $criteria = new Criteria();
        $criteria->add(Person::ID_FISCAL_ENTITY, $idFiscalEntity, Criteria::EQUAL);
        $personCollection = $this->getByCriteria($criteria);
        return $personCollection;
    }

    /**
     * Metodo que regresa una coleccion de objetos Person con MaritalStatus 'Active'
     * dependiendo del criterio establecido
     * @param Criteria $criteria
     * @return PersonCollection $personCollection
     */
    public function getActives(Criteria $criteria = null)
    {
        $criteria = (null === $criteria) ? new Criteria() : $criteria;
        $criteria->add(Person::MARITAL_STATUS, Person::$MaritalStatus['Active'], Criteria::EQUAL);
        return $this->getByCriteria($criteria);
    }
    
    /**
     * Metodo que regresa una coleccion de objetos Person con MaritalStatus 'Inactive'
     * dependiendo del criterio establecido
     * @param Criteria $criteria
     * @return PersonCollection $personCollection
     */
    public function getInactives(Criteria $criteria = null)
    {
        $criteria = (null === $criteria) ? new Criteria() : $criteria;
        $criteria->add(Person::MARITAL_STATUS, Person::$MaritalStatus['Inactive'], Criteria::EQUAL);
        return $this->getByCriteria($criteria);
    }
    
    /**
     * Activate a person
     * @param Person $person
     */ 
    public function activate($person)
    {
        if(!($person instanceof Person))
            throw new PersonException("passed parameter isn't a Person instance");
        if(Person::$MaritalStatus['Active'] != $person->getMaritalStatus())
        {
            $person->setMaritalStatus(Person::$MaritalStatus['Active']);
            $this->save($person);
        }
    }
    
    /**
     * Deactivate a person
     * @param Person $person
     */ 
    public function deactivate($person)
    {
        if(!($person instanceof Person))
            throw new PersonException("passed parameter isn't a Person instance");
        if(Person::$MaritalStatus['Inactive'] != $person->getMaritalStatus())
        {
            $person->setMaritalStatus(Person::$MaritalStatus['Inactive']);
            $this->save($person);
        }
    }


} 
 
