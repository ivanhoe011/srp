<?php
/**
 * SRP
 *
 * SRP INELECTRA
 *
 * @category   lib
 * @package    lib_models
 * @copyright  Copyright (c) 2010 PCSMEXICO
 * @author     <arturo>, $LastChangedBy$
 * @version    1.0.2 SVN: $Id$
 */

/**
 * Dependences
 */
require_once "application/models/catalogs/UserCatalog.php";
require_once "application/models/beans/Employee.php";
require_once "application/models/exceptions/EmployeeException.php";
require_once "application/models/collections/EmployeeCollection.php";
require_once "application/models/factories/EmployeeFactory.php";

/**
 * Singleton EmployeeCatalog Class
 *
 * @category   lib
 * @package    lib_models
 * @subpackage lib_models_catalogs
 * @copyright  Copyright (c) 2010 PCSMEXICO
 * @copyright  This File has been proudly generated by Bender (http://code.google.com/p/bender-modeler/). <chentepixtol> <zetta>
 * @author     zetta & chentepixtol
 * @version    1.0.2 SVN: $Revision$
 */
class EmployeeCatalog extends UserCatalog
{

    /**
     * Singleton Instance
     * @var EmployeeCatalog
     */
    static protected $instance = null;


    /**
     * Método para obtener la instancia del catálogo
     * @return EmployeeCatalog
     */
    public static function getInstance()
    {
        if (!isset(self::$instance))
        {
          self::$instance = new self();
        }
        return self::$instance;
    }

    /**
     * Constructor de la clase EmployeeCatalog
     * @return EmployeeCatalog
     */
    protected function EmployeeCatalog()
    {
        parent::UserCatalog();
    }

    /**
     * Metodo para agregar un Employee a la base de datos
     * @param Employee $employee Objeto Employee
     */
    public function create($employee)
    {
        if(!($employee instanceof Employee))
            throw new EmployeeException("passed parameter isn't a Employee instance");
        try
        {
            if(!$employee->getIdUser())
              parent::create($employee);
            $data = array(
                'id_user' => $employee->getIdUser(),
                'id_department' => $employee->getIdDepartment(),
                'type' => $employee->getType(),
                'beginning_date' => $employee->getBeginningDate(),
                'ending_date' => $employee->getEndingDate(),
                'schedule_type' => $employee->getScheduleType(),
            );
            $data = array_filter($data, 'Catalog::notNull');
            $this->db->insert(Employee::TABLENAME, $data);
            $employee->setIdEmployee($this->db->lastInsertId());
        }
        catch(Exception $e)
        {
            throw new EmployeeException("The Employee can't be saved \n" . $e->getMessage());
        }
    }

    /**
     * Metodo para Obtener los datos de un objeto por su llave primaria
     * @param int $idEmployee
     * @param boolean $throw
     * @return Employee|null
     */
    public function getById($idEmployee, $throw = false)
    {
        try
        {
            $criteria = new Criteria();
            $criteria->add(Employee::ID_EMPLOYEE, $idEmployee, Criteria::EQUAL);
            $newEmployee = $this->getByCriteria($criteria)->getOne();
        }
        catch(Exception $e)
        {
            throw new EmployeeException("Can't obtain the Employee \n" . $e->getMessage());
        }
        if($throw && null == $newEmployee)
            throw new EmployeeException("The Employee at $idEmployee not exists ");
        return $newEmployee;
    }

    /**
     * Metodo para Obtener una colección de objetos por varios ids
     * @param array $ids
     * @return EmployeeCollection
     */
    public function getByIds(array $ids)
    {
        if(null == $ids) return new EmployeeCollection();
        try
        {
            $criteria = new Criteria();
            $criteria->add(Employee::ID_EMPLOYEE, $ids, Criteria::IN);
            $employeeCollection = $this->getByCriteria($criteria);
        }
        catch(Exception $e)
        {
            throw new EmployeeException("EmployeeCollection can't be populated\n" . $e->getMessage());
        }
        return $employeeCollection;
    }

    /**
     * Metodo para actualizar un Employee
     * @param Employee $employee
     */
    public function update($employee)
    {
        if(!($employee instanceof Employee))
            throw new EmployeeException("passed parameter isn't a Employee instance");
        try
        {
            $where[] = "id_employee = '{$employee->getIdEmployee()}'";
            $data = array(
                'id_user' => $employee->getIdUser(),
                'id_department' => $employee->getIdDepartment(),
                'type' => $employee->getType(),
                'beginning_date' => $employee->getBeginningDate(),
                'ending_date' => $employee->getEndingDate(),
                'schedule_type' => $employee->getScheduleType(),
            );
            $data = array_filter($data, 'Catalog::notNull');
            $this->db->update(Employee::TABLENAME, $data, $where);
            parent::update($employee);
        }
        catch(Exception $e)
        {
            throw new EmployeeException("The Employee can't be updated \n" . $e->getMessage());
        }
    }

    /**
     * Metodo para guardar un employee
     * @param Employee $employee
     */
    public function save($employee)
    {
        if(!($employee instanceof Employee))
            throw new EmployeeException("passed parameter isn't a Employee instance");
        if(null != $employee->getIdEmployee())
            $this->update($employee);
        else
            $this->create($employee);
    }

    /**
     * Metodo para eliminar un employee
     * @param Employee $employee
     */
    public function delete($employee)
    {
        if(!($employee instanceof Employee))
            throw new EmployeeException("passed parameter isn't a Employee instance");
        $this->deleteById($employee->getIdEmployee());
        parent::delete($employee);
    }

    /**
     * Metodo para eliminar un Employee a partir de su Id
     * @param int $idEmployee
     */
    public function deleteById($idEmployee)
    {
        try
        {
            $where = array($this->db->quoteInto('id_employee = ?', $idEmployee));
            $this->db->delete(Employee::TABLENAME, $where);
        }
        catch(Exception $e)
        {
            throw new EmployeeException("The Employee can't be deleted\n" . $e->getMessage());
        }
    }

    /**
     * Metodo para eliminar varios Employee a partir de su Id
     * @param array $ids
     */
    public function deleteByIds(array $ids)
    {
        try
        {
            $criteria = new Criteria();
            $criteria->add(Employee::ID_EMPLOYEE, $ids, Criteria::IN);
            $this->db->delete(Employee::TABLENAME, array($criteria->createSql()));
        }
        catch(Exception $e)
        {
            throw new EmployeeException("Can't delete that\n" . $e->getMessage());
        }
    }

    /**
     * Metodo para Obtener todos los ids en un arreglo
     * @return array
     */
    public function retrieveAllIds()
    {
        return $this->getIdsByCriteria(new Criteria());
    }

    /**
     * Metodo para obtener todos los id de Employee por criterio
     * @param Criteria $criteria
     * @return array Array con todos los id de Employee que encajen en la busqueda
     */
    public function getIdsByCriteria(Criteria $criteria = null)
    {
        $criteria = (null === $criteria) ? new Criteria() : $criteria;
        return $this->getCustomFieldByCriteria(Employee::ID_EMPLOYEE, $criteria);
    }

    /**
     * Metodo para obtener un campo en particular de un Employee dado un criterio
     * @param string $field
     * @param Criteria $criteria
     * @param $distinct
     * @return array Array con el campo de los objetos Employee que encajen en la busqueda
     */
    public function getCustomFieldByCriteria($field, Criteria $criteria = null, $distinct = false)
    {
        $criteria = (null === $criteria) ? new Criteria() : $criteria;
        $distinct = $distinct ? 'DISTINCT' : '';
        try
        {
            $sql = "SELECT {$distinct} {$field}
                    FROM ".Employee::TABLENAME."
                      INNER JOIN ".User::TABLENAME." USING ( id_user )
                    WHERE  " . $criteria->createSql();
            $result = $this->db->fetchCol($sql);
        } catch(Zend_Db_Exception $e)
        {
            throw new EmployeeException("No se pudieron obtener los fields de objetos Employee\n" . $e->getMessage());
        }
        return $result;
    }

    /**
     * Metodo que regresa una coleccion de objetos Employee
     * dependiendo del criterio establecido
     * @param Criteria $criteria
     * @return EmployeeCollection $employeeCollection
     */
    public function getByCriteria(Criteria $criteria = null)
    {
        $criteria = (null === $criteria) ? new Criteria() : $criteria;
        $this->db->setFetchMode(Zend_Db::FETCH_ASSOC);
        try
        {
            $sql = "SELECT * FROM ".Employee::TABLENAME."
                      INNER JOIN ".User::TABLENAME." USING ( id_user )
                    WHERE " . $criteria->createSql();
            $employeeCollection = new EmployeeCollection();
            foreach ($this->db->fetchAll($sql) as $result){
                $employeeCollection->append($this->getEmployeeInstance($result));
            }
        }
        catch(Zend_Db_Exception $e)
        {
            throw new EmployeeException("Cant obtain EmployeeCollection\n" . $e->getMessage());
        }
        return $employeeCollection;
    }

    /**
     * Metodo que cuenta Employee
     * dependiendo del criterio establecido
     * @param Criteria $criteria
     * @param string $field
     * @return int $count
     */
    public function countByCriteria(Criteria $criteria = null, $field = 'id_employee')
    {
        $criteria = (null === $criteria) ? new Criteria() : $criteria;
        try
        {
            $sql = "SELECT COUNT( $field ) FROM ".Employee::TABLENAME."
                      INNER JOIN ".User::TABLENAME." USING ( id_user )
                    WHERE " . $criteria->createSql();
            $count = $this->db->fetchOne($sql);
        }
        catch(Zend_Db_Exception $e)
        {
            throw new EmployeeException("Cant obtain the count \n" . $e->getMessage());
        }
        return $count;
    }

    /**
     * Método que construye un objeto Employee y lo rellena con la información del rowset
     * @param array $result El arreglo que devolvió el objeto Zend_Db despues del fetch
     * @return Employee
     */
    private function getEmployeeInstance($result)
    {
        return EmployeeFactory::createFromArray($result);
    }

    /**
     * Obtiene un EmployeeCollection  dependiendo del idUser
     * @param int $idUser
     * @return EmployeeCollection
     */
    public function getByIdUser($idUser)
    {
        $criteria = new Criteria();
        $criteria->add(Employee::ID_USER, $idUser, Criteria::EQUAL);
        $employeeCollection = $this->getByCriteria($criteria);
        return $employeeCollection;
    }

    /**
     * Obtiene un EmployeeCollection  dependiendo del idDepartment
     * @param int $idDepartment
     * @return EmployeeCollection
     */
    public function getByIdDepartment($idDepartment)
    {
        $criteria = new Criteria();
        $criteria->add(Employee::ID_DEPARTMENT, $idDepartment, Criteria::EQUAL);
        $employeeCollection = $this->getByCriteria($criteria);
        return $employeeCollection;
    }

    /**
     * Link a Employee to Project
     * @param int $idEmployee
     * @param int $idProject
     * @param  $isMain
     * @param  $level
     */
    public function linkToProject($idEmployee, $idProject, $isMain, $level)
    {
        try
        {
            $this->unlinkFromProject($idEmployee, $idProject);
            $data = array(
                'id_employee' => $idEmployee,
                'id_project' => $idProject,
                'is_main' => $isMain,
                'level' => $level,
            );
            $this->db->insert(Employee::TABLENAME_EMPLOYEE_PROJECT, $data);
        }
        catch(Exception $e)
        {
            throw new EmployeeException("Can't link Employee to Project\n" . $e->getMessage());
        }
    }

    /**
     * Unlink a Employee from Project
     * @param int $idEmployee
     * @param int $idProject
     */
    public function unlinkFromProject($idEmployee, $idProject)
    {
        try
        {
            $where = array(
                $this->db->quoteInto('id_employee = ?', $idEmployee),
                $this->db->quoteInto('id_project = ?', $idProject),
            );
            $this->db->delete(Employee::TABLENAME_EMPLOYEE_PROJECT, $where);
        }
        catch(Exception $e)
        {
            throw new EmployeeException("Can't unlink Employee to Project\n" . $e->getMessage());
        }
    }

    /**
     * Unlink all Project relations
     * @param int $idEmployee
     * @param  $isMain
     * @param  $level
     */
    public function unlinkAllProjectRelations($idEmployee, $isMain = null, $level = null)
    {
        try
        {
            $where = array(
                $this->db->quoteInto('id_employee = ?', $idEmployee),
            );
            if(null != $isMain) $where[] = $this->db->quoteInto('is_main = ?', $isMain);
            if(null != $level) $where[] = $this->db->quoteInto('level = ?', $level);
            $this->db->delete(Employee::TABLENAME_EMPLOYEE_PROJECT, $where);
        }
        catch(Exception $e)
        {
            throw new EmployeeException("Can't unlink all Project relations \n" . $e->getMessage());
        }
    }

    /**
     * Get Employee - Project relations by Criteria
     * @param Criteria $criteria
     * @return array
     */
    public function getEmployeeProjectRelations(Criteria $criteria = null)
    {
        $criteria = (null === $criteria) ? new Criteria() : $criteria;
        $this->db->setFetchMode(Zend_Db::FETCH_ASSOC);
        try
        {
           $sql = "SELECT * FROM ". Employee::TABLENAME_EMPLOYEE_PROJECT ."
                   WHERE  " . $criteria->createSql();
           $result = $this->db->fetchAll($sql);
        } catch(Exception $e)
        {
           throw new EmployeeException("Can't obtain relations by criteria\n" . $e->getMessage());
        }
        return $result;
    }

    /**
     * Get EmployeeCollection by Project
     * @param int $idProject
     * @param [|array] $isMain
     * @param [|array] $level
     * @return EmployeeCollection
     */
    public function getByProject($idProject, $isMain = null, $level = null)
    {
        $criteria = new Criteria();
        $criteria->add('id_project', $idProject, Criteria::EQUAL);
        if(null != $isMain) $criteria->add('is_main', $isMain, is_array($isMain) ? Criteria::IN : Criteria::EQUAL);
        if(null != $level) $criteria->add('level', $level, is_array($level) ? Criteria::IN : Criteria::EQUAL);
        $employeeProject = $this->getEmployeeProjectRelations($criteria);
        $ids = array();
        foreach($employeeProject as $rs){
            $ids[] = $rs['id_employee'];
        }
        return $this->getByIds($ids);
    }

    
	public function getIdEmployeeByIdUser($idUser)
    {        
        try
        {
            $sql = "SELECT id_employee FROM ".Employee::TABLENAME."
                      INNER JOIN ".User::TABLENAME." USING ( id_user )
                    WHERE pcs_common_users.id_user = " .$idUser;
            $result = $this->db->fetchOne($sql);
        } catch(Exception $e)
        {
           throw new EmployeeException("Can't obtain relations by criteria\n" . $e->getMessage());
        }
        return $result;
    }

}
 