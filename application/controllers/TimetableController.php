<?php
/**
 * SRP
 *
 * SRP INELECTRA
 *
 * @category   Application
 * @package    Application_Controllers
 * @copyright  Copyright (c) 2010 PCSMEXICO
 * @author     <arturo>, $LastChangedBy$
 * @version    1.0.2 SVN: $Id$
 */

/**
 * Dependences
 */
require_once "lib/controller/CrudController.php";
require_once "lib/managers/TimetableManager.php";
require_once "application/models/catalogs/TimetableCatalog.php";

/**
 * TimetableController (CRUD for the Timetable Objects)
 *
 * @category   Project
 * @package    Project_Controllers
 * @copyright  Copyright (c) 2010 PCSMEXICO
 * @copyright  This File has been proudly generated by Bender (http://code.google.com/p/bender-modeler/). <chentepixtol> <zetta>
 * @author     <zetta> & <chentepixtol>
 * @version    1.0.2 SVN: $Revision$
 */
class TimetableController extends CrudController
{

    /**
     * alias for the list action
     */
    public function indexAction()
    {
        $this->_forward('list');
    }

    /**
     * List the objects Timetable actives
     */
    public function listAction()
    {
        $this->view->timetables = TimetableCatalog::getInstance()->getActives();
        $this->setTitle('List the Timetable');
    }

    /**
     * delete an Timetable
     */
    public function deleteAction()
    {
        $timetableCatalog = TimetableCatalog::getInstance();
        $idTimetable = $this->getRequest()->getParam('idTimetable');
        $timetable = $timetableCatalog->getById($idTimetable);
        $timetableCatalog->deactivate($timetable);
        $this->setFlash('ok','Successfully removed the Timetable');
        $this->_redirect('timetable/list');
    }

    /**
     * Form for edit an Timetable
     */
    public function editAction()
    {
        $timetableCatalog = TimetableCatalog::getInstance();
        $idTimetable = $this->getRequest()->getParam('idTimetable');
        $timetable = $timetableCatalog->getById($idTimetable);
        $post = array(
            'id_timetable' => $timetable->getIdTimetable(),
            'id_employee' => $timetable->getIdEmployee(),
            'date' => $timetable->getDate(),
            'id_approver_1' => $timetable->getIdApprover1(),
            'id_approver_2' => $timetable->getIdApprover2(),
            'id_current_approver' => $timetable->getIdCurrentApprover(),
            'status' => $timetable->getStatus(),
        );
        $this->view->post = $post;
        $this->setTitle('Edit Timetable');
    }

    /**
     * Create an Timetable
     */
    public function createAction()
    {
        $timetableCatalog = TimetableCatalog::getInstance();
        $idEmployee = utf8_decode($this->getRequest()->getParam('id_employee'));
        $date = utf8_decode($this->getRequest()->getParam('date'));
        $idApprover1 = utf8_decode($this->getRequest()->getParam('id_approver_1'));
        $idApprover2 = utf8_decode($this->getRequest()->getParam('id_approver_2'));
        $idCurrentApprover = utf8_decode($this->getRequest()->getParam('id_current_approver'));
        $status = utf8_decode($this->getRequest()->getParam('status'));
        $timetable = TimetableFactory::create($idEmployee, $date, $idApprover1, $idApprover2, $idCurrentApprover, $status);
        $timetableCatalog->create($timetable);
        $this->view->setTpl('_row');
        $this->view->setLayoutFile(false);
        $this->view->timetable = $timetable;
    }

    /**
     * Update an Timetable
     */
    public function updateAction()
    {
        $timetableCatalog = TimetableCatalog::getInstance();
        $idTimetable = $this->getRequest()->getParam('idTimetable');
        $timetable = $timetableCatalog->getById($idTimetable);
        $timetable->setIdEmployee($this->getRequest()->getParam('id_employee'));
        $timetable->setDate($this->getRequest()->getParam('date'));
        $timetable->setIdApprover1($this->getRequest()->getParam('id_approver_1'));
        $timetable->setIdApprover2($this->getRequest()->getParam('id_approver_2'));
        $timetable->setIdCurrentApprover($this->getRequest()->getParam('id_current_approver'));
        $timetable->setStatus($this->getRequest()->getParam('status'));
        $timetableCatalog->update($timetable);
        $this->setFlash('ok','Successfully edited the Timetable');
        $this->_redirect('timetable/list');
    }

    public function employeeTimetableAction(){
        $this->view->schedule_type=$this->getUser()->getBeanEmployee()->getScheduleType();
    }

    public function saveTimetableAction(){
        $this->noRender();
        $rows_local=json_decode($this->getRequest()->getParam("rows_local"),true);
        $rows_db=json_decode($this->getRequest()->getParam("rows_db"),true);
        die(json_encode (TimetableManager::getInstance()->createTimetable($this->getUser()->getBeanEmployee()->getIdEmployee(), $this->getRequest()->getParam("beginning"), Timetable::$Status["draft"], $rows_local,$rows_db)));
    }

    public function releaseTimetableAction(){
        $this->noRender();
        $rows_local=json_decode($this->getRequest()->getParam("rows_local"),true);
        $rows_db=json_decode($this->getRequest()->getParam("rows_db"),true);
        if(!empty($rows_local)){
            $response=TimetableManager::getInstance()->createTimetable($this->getUser()->getBeanEmployee()->getIdEmployee(), $this->getRequest()->getParam("beginning"), Timetable::$Status["released"], $rows_local);
            die(json_encode ($response));
        } else
            die (json_encode(TimetableManager::getInstance()->releaseTimetable($rows_db,$this->getUser()->getBeanEmployee()->getIdEmployee())));
    }

    public function deleteTimetableAction(){
        $this->noRender();
        $rows_db=json_decode($this->getRequest()->getParam("rows_db"),true);
        die(json_encode (TimetableManager::getInstance()->deleteTimetable($rows_db)));
    }

    public function getEmployeesTimetablesAction(){
        $this->noRender();
        $idEmployee = $this->getUser()->getBeanEmployee()->getIdEmployee();
        $date_digested = new Zend_Date($this->getRequest()->getParam('dayDate'), "dd/MM/YYYY");
        echo TimetableManager::getInstance()->getEmployeesTimetables($idEmployee, $date_digested->toString("YYYY-MM-dd"), $date_digested->addDay(6)->toString("YYYY-MM-dd"));
    }

    public function approveTimetableAction(){
        $this->noRender();
        die (json_encode(TimetableManager::getInstance()->approveTimetable(json_decode($this->getRequest()->getParam("rows_db")),$this->getUser()->getBeanEmployee()->getIdEmployee())));
    }

}