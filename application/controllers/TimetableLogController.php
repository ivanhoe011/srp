<?php
/**
 * SRP
 *
 * SRP INELECTRA
 *
 * @category   Application
 * @package    Application_Controllers
 * @copyright  Copyright (c) 2010 PCSMEXICO
 * @author     <arturo>, $LastChangedBy$
 * @version    1.0.2 SVN: $Id$
 */

/**
 * Dependences
 */
require_once "lib/controller/CrudController.php";
require_once "application/models/catalogs/TimetableLogCatalog.php";

/**
 * TimetableLogController (CRUD for the TimetableLog Objects)
 *
 * @category   Project
 * @package    Project_Controllers
 * @copyright  Copyright (c) 2010 PCSMEXICO 
 * @copyright  This File has been proudly generated by Bender (http://code.google.com/p/bender-modeler/). <chentepixtol> <zetta>
 * @author     <zetta> & <chentepixtol>
 * @version    1.0.2 SVN: $Revision$
 */
class TimetableLogController extends CrudController
{
    
    /**
     * alias for the list action
     */
    public function indexAction()
    {
        $this->_forward('list');
    }
    
    /**
     * List the objects TimetableLog actives
     */
    public function listAction()
    {
        $this->view->timetableLogs = TimetableLogCatalog::getInstance()->getActives();
        $this->setTitle('List the TimetableLog');
    }
    
    /**
     * delete an TimetableLog
     */
    public function deleteAction()
    {
        $timetableLogCatalog = TimetableLogCatalog::getInstance();
        $idTimetableLog = $this->getRequest()->getParam('idTimetableLog');
        $timetableLog = $timetableLogCatalog->getById($idTimetableLog);
        $timetableLogCatalog->deactivate($timetableLog);
        $this->setFlash('ok','Successfully removed the TimetableLog');
        $this->_redirect('timetable-log/list');
    }
    
    /**
     * Form for edit an TimetableLog
     */
    public function editAction()
    {
        $timetableLogCatalog = TimetableLogCatalog::getInstance();
        $idTimetableLog = $this->getRequest()->getParam('idTimetableLog');
        $timetableLog = $timetableLogCatalog->getById($idTimetableLog);
        $post = array(
            'id_timetable_log' => $timetableLog->getIdTimetableLog(),
            'id_timetable' => $timetableLog->getIdTimetable(),
            'timestamp' => $timetableLog->getTimestamp(),
            'id_employee' => $timetableLog->getIdEmployee(),
            'type' => $timetableLog->getType(),
        );
        $this->view->post = $post;
        $this->setTitle('Edit TimetableLog');
    }
    
    /**
     * Create an TimetableLog
     */
    public function createAction()
    {   
        $timetableLogCatalog = TimetableLogCatalog::getInstance();
        $idTimetable = utf8_decode($this->getRequest()->getParam('id_timetable'));
        $timestamp = utf8_decode($this->getRequest()->getParam('timestamp'));
        $idEmployee = utf8_decode($this->getRequest()->getParam('id_employee'));
        $type = utf8_decode($this->getRequest()->getParam('type'));
        $timetableLog = TimetableLogFactory::create($idTimetable, $timestamp, $idEmployee, $type);
        $timetableLogCatalog->create($timetableLog);  
        $this->view->setTpl('_row');
        $this->view->setLayoutFile(false);
        $this->view->timetableLog = $timetableLog;
    }
    
    /**
     * Update an TimetableLog
     */
    public function updateAction()
    {
        $timetableLogCatalog = TimetableLogCatalog::getInstance();
        $idTimetableLog = $this->getRequest()->getParam('idTimetableLog');
        $timetableLog = $timetableLogCatalog->getById($idTimetableLog);
        $timetableLog->setIdTimetable($this->getRequest()->getParam('id_timetable'));
        $timetableLog->setTimestamp($this->getRequest()->getParam('timestamp'));
        $timetableLog->setIdEmployee($this->getRequest()->getParam('id_employee'));
        $timetableLog->setType($this->getRequest()->getParam('type'));
        $timetableLogCatalog->update($timetableLog);
        $this->setFlash('ok','Successfully edited the TimetableLog');
        $this->_redirect('timetable-log/list');
    }
    
}
