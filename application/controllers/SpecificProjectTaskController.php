<?php
/**
 * SRP
 *
 * SRP INELECTRA
 *
 * @category   Application
 * @package    Application_Controllers
 * @copyright  Copyright (c) 2010 PCSMEXICO
 * @author     <arturo>, $LastChangedBy$
 * @version    1.0.2 SVN: $Id$
 */

/**
 * Dependences
 */
require_once "lib/controller/CrudController.php";
require_once "application/models/catalogs/SpecificProjectTaskCatalog.php";
require_once "lib/utils/project_task/ProjectTaskUtilities.php";
require_once "lib/managers/ProjectTaskManager.php";
require_once "application/models/catalogs/SpecificProjectCatalog.php";
define ("STASK_DIR","./data/load/project_task/");

/**
 * SpecificProjectTaskController (CRUD for the SpecificProjectTask Objects)
 *
 * @category   Project
 * @package    Project_Controllers
 * @copyright  Copyright (c) 2010 PCSMEXICO 
 * @copyright  This File has been proudly generated by Bender (http://code.google.com/p/bender-modeler/). <chentepixtol> <zetta>
 * @author     <zetta> & <chentepixtol>
 * @version    1.0.2 SVN: $Revision$
 */
class SpecificProjectTaskController extends CrudController
{
    
    /**
     * alias for the list action
     */
    public function indexAction()
    {
        $this->_forward('list');
    }
    
    /**
     * List the objects SpecificProjectTask actives
     */
    public function listAction()
    {
        $this->view->specificProjectTasks = SpecificProjectTaskCatalog::getInstance()->getActives();
        $this->setTitle('List the SpecificProjectTask');
    }
    
    /**
     * delete an SpecificProjectTask
     */
    public function deleteAction()
    {
        $specificProjectTaskCatalog = SpecificProjectTaskCatalog::getInstance();
        $idSpecificProjectTask = $this->getRequest()->getParam('idSpecificProjectTask');
        $specificProjectTask = $specificProjectTaskCatalog->getById($idSpecificProjectTask);
        $specificProjectTaskCatalog->deactivate($specificProjectTask);
        $this->setFlash('ok','Successfully removed the SpecificProjectTask');
        $this->_redirect('specific-project-task/list');
    }
    
    /**
     * Form for edit an SpecificProjectTask
     */
    public function editAction()
    {
        $specificProjectTaskCatalog = SpecificProjectTaskCatalog::getInstance();
        $idSpecificProjectTask = $this->getRequest()->getParam('idSpecificProjectTask');
        $specificProjectTask = $specificProjectTaskCatalog->getById($idSpecificProjectTask);
        $post = array(
            'id_specific_project_task' => $specificProjectTask->getIdSpecificProjectTask(),
            'id_project_task' => $specificProjectTask->getIdProjectTask(),
            'work_authorization_status' => $specificProjectTask->getWorkAuthorizationStatus(),
        );
        $this->view->post = $post;
        $this->setTitle('Edit SpecificProjectTask');
    }
    
    /**
     * Create an SpecificProjectTask
     */
    public function createAction()
    {   
        $specificProjectTaskCatalog = SpecificProjectTaskCatalog::getInstance();
        $idProjectTask = utf8_decode($this->getRequest()->getParam('id_project_task'));
        $workAuthorizationStatus = utf8_decode($this->getRequest()->getParam('work_authorization_status'));
        $specificProjectTask = SpecificProjectTaskFactory::create($idProjectTask, $workAuthorizationStatus);
        $specificProjectTaskCatalog->create($specificProjectTask);  
        $this->view->setTpl('_row');
        $this->view->setLayoutFile(false);
        $this->view->specificProjectTask = $specificProjectTask;
    }
    
    /**
     * Update an SpecificProjectTask
     */
    public function updateAction()
    {
        $specificProjectTaskCatalog = SpecificProjectTaskCatalog::getInstance();
        $idSpecificProjectTask = $this->getRequest()->getParam('idSpecificProjectTask');
        $specificProjectTask = $specificProjectTaskCatalog->getById($idSpecificProjectTask);
        $specificProjectTask->setIdProjectTask($this->getRequest()->getParam('id_project_task'));
        $specificProjectTask->setWorkAuthorizationStatus($this->getRequest()->getParam('work_authorization_status'));
        $specificProjectTaskCatalog->update($specificProjectTask);
        $this->setFlash('ok','Successfully edited the SpecificProjectTask');
        $this->_redirect('specific-project-task/list');
    }

    /**
     * Upload a set of Project Tasks
     */
    public function uploadAction() {
        try{
            $row = 0;
            $archives = glob(STASK_DIR . "*.csv");
            if (count($archives) > 1)
                $this->view->warning_files = "Se encontró mas de un archivo csv";
            if (($handle = fopen($archives[0], "r")) !== FALSE) {
                while (($data = fgetcsv($handle, 1000, "|")) !== FALSE) {
                    if ($row == 0)
                        $titles = $data;
                    else
                        foreach ($data as $k => $v)
                            $data_fields[$row][$titles[$k]] = $v;
                    $row++;
                }
                fclose($handle);
                ProjectTaskManager::getInstance()->check_projects_tasks($data_fields);
                $digested_file = ProjectTaskUtilities::getInstance()->validateRowFields($data_fields);
                foreach ($digested_file["reported_rows"] as $key => $reported_row) {
                    unset($reported_row["ERROR"]);
                    $csv_lines[$key] = implode("|", $reported_row);
                }
                $result = ProjectTaskManager::getInstance()->upload_create($digested_file["ok_rows"], "1");
                $this->view->reported_rows = $digested_file["reported_rows"];
                $this->view->reported_rows_count = count($digested_file["reported_rows"]);
                $this->view->ok_rows = $digested_file["ok_rows"];
                $this->view->ok_rows_count = count($digested_file["ok_rows"]);
                $this->view->inserted_rows = $result["inserted_rows"];
                $this->view->db_errors = $result["db_errors"];
                $this->view->db_errors_count = count($result["db_errors"]);
                $this->view->csv_lines = $csv_lines;
                $this->view->rows_count = $row - 1;
                //unlink($archives[0]);
            }
        }catch(Exception $e){
            $this->view->warning_files = "No hay ningun archivo para carga de datos";
        }

    }

    public function getTasksAction(){
        $this->noRender();
        echo (json_encode(ProjectTaskCatalog::getInstance()->getByProject($this->getRequest()->getParam("id_project"))->toArray()));
    }
    
}
