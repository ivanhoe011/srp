<?php

/**
 * SRP
 *
 * SRP INELECTRA
 *
 * @category   Application
 * @package    Application_Controllers
 * @copyright  Copyright (c) 2010 PCSMEXICO
 * @author     <arturo>, $LastChangedBy$
 * @version    1.0.2 SVN: $Id$
 */
/**
 * Dependences
 */
require_once "lib/controller/CrudController.php";
require_once "lib/utils/project_load/ProjectUtilities.php";
require_once "lib/managers/ProjectManager.php";
require_once "application/models/catalogs/SpecificProjectCatalog.php";
require_once "application/models/catalogs/ProjectCatalog.php";
require_once "application/models/catalogs/UserCatalog.php";
require_once "application/models/catalogs/EmployeeCatalog.php";
define ("PROY_DIR","./data/load/project/");
define("PROY_DIR", "./data/load/project/");

/**
 * SpecificProjectController (CRUD for the SpecificProject Objects)
 *
 * @category   Project
 * @package    Project_Controllers
 * @copyright  Copyright (c) 2010 PCSMEXICO 
 * @copyright  This File has been proudly generated by Bender (http://code.google.com/p/bender-modeler/). <chentepixtol> <zetta>
 * @author     <zetta> & <chentepixtol>
 * @version    1.0.2 SVN: $Revision$
 */
class SpecificProjectController extends CrudController {

    /**
     * alias for the list action
     */
    public function indexAction() {
        $this->_forward('list');
    }

    /**
     * List the objects SpecificProject actives
     */
    public function listAction() {
        $this->view->specificProjects = SpecificProjectCatalog::getInstance()->getActives();
        $this->setTitle('Lista de Proyectos Específicos');
    }

    /**
     * delete an SpecificProject
     */
    public function deleteAction() {
        $specificProjectCatalog = SpecificProjectCatalog::getInstance();
        $idSpecificProject = $this->getRequest()->getParam('idSpecificProject');
        $specificProject = $specificProjectCatalog->getById($idSpecificProject);
        $specificProjectCatalog->deactivate($specificProject);
        $this->setFlash('ok','El proyecto ha sido eliminado');
        $this->setFlash('ok', 'Successfully removed the SpecificProject');
        $this->_redirect('specific-project/list');
    }

    /**
     * Form for edit an SpecificProject
     */
    public function editAction() {
        $specificProjectCatalog = SpecificProjectCatalog::getInstance();
        $idSpecificProject = $this->getRequest()->getParam('idSpecificProject');
        $specificProject = $specificProjectCatalog->getById($idSpecificProject);
        $post = array(
            'id_specific_project' => $specificProject->getIdSpecificProject(),
            'id_project' => $specificProject->getIdProject(),
            'project_code' => $specificProject->getProjectCode(),
            'project_name' => $specificProject->getProjectName(),
            'beginning_date' => $specificProject->getBeginningDate(),
            'ending_date' => $specificProject->getEndingDate(),
        );
        $this->view->post = $post;
        $this->setTitle('Edit SpecificProject');
    }

    /**
     * Create an SpecificProject
     */
    public function createAction() {
        $specificProjectCatalog = SpecificProjectCatalog::getInstance();
        $idProject = utf8_decode($this->getRequest()->getParam('id_project'));
        $projectCode = utf8_decode($this->getRequest()->getParam('project_code'));
        $projectName = utf8_decode($this->getRequest()->getParam('project_name'));
        $beginningDate = utf8_decode($this->getRequest()->getParam('beginning_date'));
        $endingDate = utf8_decode($this->getRequest()->getParam('ending_date'));
        $specificProject = SpecificProjectFactory::create($idProject, $projectCode, $projectName, $beginningDate, $endingDate);
        $specificProjectCatalog->create($specificProject);
        $this->view->setTpl('_row');
        $this->view->setLayoutFile(false);
        $this->view->specificProject = $specificProject;
    }

    /**
     * Update an SpecificProject
     */
    public function updateAction() {
        $specificProjectCatalog = SpecificProjectCatalog::getInstance();
        $idSpecificProject = $this->getRequest()->getParam('idSpecificProject');
        $specificProject = $specificProjectCatalog->getById($idSpecificProject);
        $specificProject->setIdProject($this->getRequest()->getParam('id_project'));
        $specificProject->setProjectCode($this->getRequest()->getParam('project_code'));
        $specificProject->setProjectName($this->getRequest()->getParam('project_name'));
        $specificProject->setBeginningDate($this->getRequest()->getParam('beginning_date'));
        $specificProject->setEndingDate($this->getRequest()->getParam('ending_date'));
        $specificProjectCatalog->update($specificProject);
        $this->setFlash('ok', 'Successfully edited the SpecificProject');
        $this->_redirect('specific-project/list');
    }

    public function uploadAction() {
        try {
            $row = 0;
            $archives = glob(PROY_DIR . "*.csv");
            if (count($archives) > 1)
                $this->view->warning_files = "Se encontró mas de un archivo csv";
            if (($handle = fopen($archives[0], "r")) !== FALSE) {
                while (($data = fgetcsv($handle, 1000, "|")) !== FALSE) {
                    if ($row == 0)
                        $titles = $data;
                    else
                        foreach ($data as $k => $v)
                            $data_fields[$row][$titles[$k]] = $v;
                    $row++;
                }
                fclose($handle);
                ProjectManager::getInstance()->check_projects($data_fields);
                $digested_file = ProjectUtilities::getInstance()->validateRowFields($data_fields);
 //           print_r($digested_file);
//            die();
                foreach ($digested_file["reported_rows"] as $key => $reported_row) {
                    unset($reported_row["ERROR"]);
                    $csv_lines[$key] = implode("|", $reported_row);
                }
                $result = ProjectManager::getInstance()->upload_create($digested_file["ok_rows"]);
                $this->view->reported_rows = $digested_file["reported_rows"];
                $this->view->reported_rows_count = count($digested_file["reported_rows"]);
                $this->view->ok_rows = $digested_file["ok_rows"];
                $this->view->ok_rows_count = count($digested_file["ok_rows"]);
                $this->view->inserted_rows = $result["inserted_rows"];
                $this->view->db_errors = $result["db_errors"];
                $this->view->db_errors_count = count($result["db_errors"]);
                $this->view->csv_lines = $csv_lines;
                $this->view->rows_count = $row - 1;
                //unlink($archives[0]);
            }
        } catch (Exception $e) {
            $this->view->warning_files = "No hay ningun archivo para carga de datos";
        }
    }
    
	/**
     * Approve an SpecificProject
     */
    public function approveAction()
    {
       // $this->view->employees = EmployeeCatalog::getInstance()->getActives();          
        $employees = EmployeeCatalog::getInstance()->getActives();
        while ($employees->valid())
        {
        	$employee = $employees->read();
        	$person = PersonCatalog::getInstance()->getById($employee->getIdPerson());
        	$employeesArray[] = array (
        		'idEmployee'=> $employee->getIdEmployee(),
        		'name'=> $person-> getName(),
        		'middleName'=> $person->getMiddleName(),
        		'lastName'=> $person->getLastName()
        	); 
        }  
        $this->view->employees = $employeesArray;             
       	$specificProjectCatalog = SpecificProjectCatalog::getInstance();
        $idSpecificProject = $this->getRequest()->getParam('idSpecificProject');
        $this->view->idSpecificProject = $idSpecificProject;
        $this->view->permissions = ProjectCatalog::getInstance()->getAllPermissions();        
        $specificProject = $specificProjectCatalog->getByIdProjectObject($idSpecificProject);
        $post = array(
			'idSpecificProject' => $specificProject->getIdProject(),
			'name' => $specificProject->getProjectName(),
        	);
        $this->view->post = $post;  
        $this->view->levelOne = 1;
        $this->view->levelTwo = 2; 
        $this->view->isMainOne = 1;  
        $this->view->isMainZero = 0;  
        $this->setTitle('Aprobar Proyecto');
    }
    
	/**
     * Approve user
     */   
	public function approvedUserAction()
    {   
    	$this->view->Projects = ProjectCatalog::getInstance()->getByCriteria(new Criteria());        
        $this->view->employees = EmployeeCatalog::getInstance()->getByCriteria(new Criteria());        
        $operation = $this->getRequest()->getParam('value');
        $idEmployee = $this->getRequest()->getParam('idEmployee');
        $idProject = $this->getRequest()->getParam('idSpecificProject');
        $level = $this->getRequest()->getParam('level');
        $isMain = $this->getRequest()->getParam('isMain');
        if( $operation )
        {
        	ProjectCatalog::getInstance()->unlinkFromEmployee($idProject, $idEmployee);
		   	ProjectCatalog::getInstance()->linkToEmployee($idProject, $idEmployee, $isMain, $level);
        }
		else  
		   	ProjectCatalog::getInstance()->unlinkFromEmployee($idProject, $idEmployee);
		   
	$this->noRender();		   		
    }

    public function getSpecificsProjectsAction(){
        $this->noRender();
        echo(json_encode(SpecificProjectCatalog::getInstance()->getActives()->toArray()));
    }
}
