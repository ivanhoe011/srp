<?php
/**
 * SRP
 *
 * SRP INELECTRA
 *
 * @category   Application
 * @package    Application_Controllers
 * @copyright  Copyright (c) 2010 PCSMEXICO
 * @author     <arturo>, $LastChangedBy$
 * @version    1.0.2 SVN: $Id$
 */

/**
 * Dependences
 */
require_once "lib/controller/CrudController.php";
require_once "application/models/catalogs/UserCatalog.php";

/**
 * UserController (CRUD for the User Objects)
 *
 * @category   Project
 * @package    Project_Controllers
 * @copyright  Copyright (c) 2010 PCSMEXICO 
 * @copyright  This File has been proudly generated by Bender (http://code.google.com/p/bender-modeler/). <chentepixtol> <zetta>
 * @author     <zetta> & <chentepixtol>
 * @version    1.0.2 SVN: $Revision$
 */
class UserController extends CrudController
{
    
    /**
     * alias for the list action
     */
    public function indexAction()
    {
        $this->_forward('list');
    }
    
    /**
     * List the objects User actives
     */
    public function listAction()
    {
        $this->view->users = UserCatalog::getInstance()->getActives();
        $this->setTitle('List the User');
    }
    
    /**
     * delete an User
     */
    public function deleteAction()
    {
        $userCatalog = UserCatalog::getInstance();
        $idUser = $this->getRequest()->getParam('idUser');
        $user = $userCatalog->getById($idUser);
        $userCatalog->deactivate($user);
        $this->setFlash('ok','Successfully removed the User');
        $this->_redirect('user/list');
    }
    
    /**
     * Form for edit an User
     */
    public function editAction()
    {
        $userCatalog = UserCatalog::getInstance();
        $idUser = $this->getRequest()->getParam('idUser');
        $user = $userCatalog->getById($idUser);
        $post = array(
            'id_user' => $user->getIdUser(),
            'username' => $user->getUsername(),
            'password' => $user->getPassword(),
            'status' => $user->getStatus(),
            'id_access_role' => $user->getIdAccessRole(),
            'id_person' => $user->getIdPerson(),
            'system' => $user->getSystem(),
        );
        $this->view->post = $post;
        $this->setTitle('Edit User');
    }
    
    /**
     * Create an User
     */
    public function createAction()
    {   
        $userCatalog = UserCatalog::getInstance();
        $username = utf8_decode($this->getRequest()->getParam('username'));
        $password = utf8_decode($this->getRequest()->getParam('password'));
        $status = utf8_decode($this->getRequest()->getParam('status'));
        $idAccessRole = utf8_decode($this->getRequest()->getParam('id_access_role'));
        $idPerson = utf8_decode($this->getRequest()->getParam('id_person'));
        $system = utf8_decode($this->getRequest()->getParam('system'));
        $user = UserFactory::create($username, $password, $status, $idAccessRole, $idPerson, $system);
        $userCatalog->create($user);  
        $this->view->setTpl('_row');
        $this->view->setLayoutFile(false);
        $this->view->user = $user;
    }
    
    /**
     * Update an User
     */
    public function updateAction()
    {
        $userCatalog = UserCatalog::getInstance();
        $idUser = $this->getRequest()->getParam('idUser');
        $user = $userCatalog->getById($idUser);
        $user->setUsername($this->getRequest()->getParam('username'));
        $user->setPassword($this->getRequest()->getParam('password'));
        $user->setStatus($this->getRequest()->getParam('status'));
        $user->setIdAccessRole($this->getRequest()->getParam('id_access_role'));
        $user->setIdPerson($this->getRequest()->getParam('id_person'));
        $user->setSystem($this->getRequest()->getParam('system'));
        $userCatalog->update($user);
        $this->setFlash('ok','Successfully edited the User');
        $this->_redirect('user/list');
    }
    
}
