<?php
/**
 * SRP
 *
 * SRP INELECTRA
 *
 * @category   Application
 * @package    Application_Controllers
 * @copyright  Copyright (c) 2010 PCSMEXICO
 * @author     <arturo>, $LastChangedBy$
 * @version    1.0.2 SVN: $Id$
 */

/**
 * Dependences
 */
require_once "lib/controller/CrudController.php";
require_once "application/models/catalogs/ProjectTaskLogCatalog.php";

/**
 * ProjectTaskLogController (CRUD for the ProjectTaskLog Objects)
 *
 * @category   Project
 * @package    Project_Controllers
 * @copyright  Copyright (c) 2010 PCSMEXICO 
 * @copyright  This File has been proudly generated by Bender (http://code.google.com/p/bender-modeler/). <chentepixtol> <zetta>
 * @author     <zetta> & <chentepixtol>
 * @version    1.0.2 SVN: $Revision$
 */
class ProjectTaskLogController extends CrudController
{
    
    /**
     * alias for the list action
     */
    public function indexAction()
    {
        $this->_forward('list');
    }
    
    /**
     * List the objects ProjectTaskLog actives
     */
    public function listAction()
    {
        $this->view->projectTaskLogs = ProjectTaskLogCatalog::getInstance()->getActives();
        $this->setTitle('List the ProjectTaskLog');
    }
    
    /**
     * delete an ProjectTaskLog
     */
    public function deleteAction()
    {
        $projectTaskLogCatalog = ProjectTaskLogCatalog::getInstance();
        $idProjectTaskLog = $this->getRequest()->getParam('idProjectTaskLog');
        $projectTaskLog = $projectTaskLogCatalog->getById($idProjectTaskLog);
        $projectTaskLogCatalog->deactivate($projectTaskLog);
        $this->setFlash('ok','Successfully removed the ProjectTaskLog');
        $this->_redirect('project-task-log/list');
    }
    
    /**
     * Form for edit an ProjectTaskLog
     */
    public function editAction()
    {
        $projectTaskLogCatalog = ProjectTaskLogCatalog::getInstance();
        $idProjectTaskLog = $this->getRequest()->getParam('idProjectTaskLog');
        $projectTaskLog = $projectTaskLogCatalog->getById($idProjectTaskLog);
        $post = array(
            'id_project_task_log' => $projectTaskLog->getIdProjectTaskLog(),
            'id_project_task' => $projectTaskLog->getIdProjectTask(),
            'timestamp' => $projectTaskLog->getTimestamp(),
        );
        $this->view->post = $post;
        $this->setTitle('Edit ProjectTaskLog');
    }
    
    /**
     * Create an ProjectTaskLog
     */
    public function createAction()
    {   
        $projectTaskLogCatalog = ProjectTaskLogCatalog::getInstance();
        $idProjectTask = utf8_decode($this->getRequest()->getParam('id_project_task'));
        $timestamp = utf8_decode($this->getRequest()->getParam('timestamp'));
        $projectTaskLog = ProjectTaskLogFactory::create($idProjectTask, $timestamp);
        $projectTaskLogCatalog->create($projectTaskLog);  
        $this->view->setTpl('_row');
        $this->view->setLayoutFile(false);
        $this->view->projectTaskLog = $projectTaskLog;
    }
    
    /**
     * Update an ProjectTaskLog
     */
    public function updateAction()
    {
        $projectTaskLogCatalog = ProjectTaskLogCatalog::getInstance();
        $idProjectTaskLog = $this->getRequest()->getParam('idProjectTaskLog');
        $projectTaskLog = $projectTaskLogCatalog->getById($idProjectTaskLog);
        $projectTaskLog->setIdProjectTask($this->getRequest()->getParam('id_project_task'));
        $projectTaskLog->setTimestamp($this->getRequest()->getParam('timestamp'));
        $projectTaskLogCatalog->update($projectTaskLog);
        $this->setFlash('ok','Successfully edited the ProjectTaskLog');
        $this->_redirect('project-task-log/list');
    }
    
}
