<?php
/**
 * SRP
 *
 * Sistema de Registro de Planillas
 *
 * @category   Application
 * @package    Application_Controllers
 * @copyright  Copyright (c) 2010 PCSMEXICO
 * @author     <marlen>, $LastChangedBy$
 * @version    1.0.0 SVN: $Id$
 */

/**
 * Dependences
 */
require_once "lib/controller/CrudController.php";
require_once "lib/managers/CalendarDayManager.php";
require_once "application/models/catalogs/CalendarDayCatalog.php";
require_once "application/models/catalogs/EmployeeCatalog.php";
require_once "application/models/catalogs/PersonCatalog.php";

/**
 * CalendarDayController (CRUD for the CalendarDay Objects)
 *
 * @category   Project
 * @package    Project_Controllers
 * @copyright  Copyright (c) 2010 PCSMEXICO 
 * @copyright  This File has been proudly generated by Bender (http://code.google.com/p/bender-modeler/). <chentepixtol> <zetta>
 * @author     <zetta> & <chentepixtol>
 * @version    1.0.0 SVN: $Revision$
 */
class CalendarDayController extends BaseController
{
    
    /**
     * alias for the list action
     */
    public function indexAction()
    {
        $this->_forward('list');
    }
    
    /**
     * List the objects CalendarDay actives
     */
    public function listAction()
    {
    	$all = 'Todos';
    	$name = $this->getRequest()->getParam('name');
    	if($name == null)
    		$this->view->name = $all;  
    	else 
    		$this->view->name = $name;	
    	if (($name == $all) || ($name == null))
    	{
        	$employees = EmployeeCatalog::getInstance()->getActives();
		    while ($employees->valid())
		        {
		        	$employee = $employees->read();
		        	$person = PersonCatalog::getInstance()->getById($employee->getIdPerson());
		        	$employeesArray[] = array (
		        		'idEmployee'=> $employee->getIdEmployee(),
		        		'name'=> $person-> getName()." ".$person->getMiddleName()." ".$person->getLastName()
		        	); 
		        }
   		 }
        else 
        {
        	$name = str_replace(" ", "%", $name);
        	$employees = EmployeeCatalog::getInstance()->getBySearch($name);
	        foreach ($employees as $employee)
			{
				$idEmployee = $employee['id_employee'];
				$user = UserCatalog::getInstance()->getById($employee['id_user']);
			    $person = PersonCatalog::getInstance()->getById($user->getIdPerson());
			    $employeesArray[] = array (
					'idEmployee'=> $employee['id_employee'],
			       	'name'=> $person-> getName()." ".$person->getMiddleName()." ".$person->getLastName()
			    ); 
			}
        } 
        $this->view->employees = $employeesArray; 
		$dates_enable=CalendarDayManager::getInstance()->getEnableDays(0);
		$dates_disable=CalendarDayManager::getInstance()->getDisableDays(0);
		$this->view->noHolidays= json_encode($dates_enable);
        $this->view->holidays= json_encode($dates_disable);
        $this->setTitle('Lista de Días hábiles / inhábiles');
        $this->view->setTpl('List');
    }
    
 	/**
     * Create an CalendarDay
     */
    public function createAction()
    {   
        $calendarDayCatalog = CalendarDayCatalog::getInstance();
        
        if ($this->getRequest()->getParam('id_employee') == 0)
        	$idEployee = 0;
        else 
	        $idEmployee = utf8_decode($this->getRequest()->getParam('id_employee'));
	    $date_digest=new Zend_Date($this->getRequest()->getParam('datepicker'),"dd/MM/YYYY");
	    $dayDate=$date_digest->toString("YYYY-MM-dd");
	    if ($this->getRequest()->getParam('enabled_disabled') != 2)
	    	$enabledDisabled = 1;
		else       		
	        $enabledDisabled = utf8_decode($this->getRequest()->getParam('enabled_disabled'));        	
	    $calendarDay = CalendarDayFactory::create($idEmployee, $dayDate, $enabledDisabled);
	    $calendarDayCatalog->create($calendarDay); 
        $this->noRender();
    }
    
    /*
     * View the CalendarDay
     */
    public function viewAction()
    {
    	$idEmployee = utf8_decode($this->getRequest()->getParam('idEmployee'));
    	$this->view->idEmployee = $idEmployee;
    	if($idEmployee == 0)
    		$this->view->name = 'Todos';
    	else
    	{
	    	$employee = EmployeeCatalog::getInstance()->getById($idEmployee);
	    	$person = PersonCatalog::getInstance()->getById($employee->getIdPerson());
        	$this->view->name = $person-> getName()." ".$person->getMiddleName()." ".$person->getLastName();
    	}
		$dates_enable=CalendarDayManager::getInstance()->getEnableDays($idEmployee);
		$dates_disable=CalendarDayManager::getInstance()->getDisableDays($idEmployee);
		$this->view->noHolidays= json_encode($dates_enable);
		$this->view->holidays= json_encode($dates_disable);
    	$this->setTitle('Edición de Días');
    }
    
    /*
     * Modify an CalendarDay
     */
    public function modifyAction()
    {
    	$idEmployee = $this->getRequest()->getParam('idEmployee');
    	$date_digest=new Zend_Date($this->getRequest()->getParam('dayDate'),"dd/MM/YYYY");
	    $dayDate=$date_digest->toString("YYYY-MM-dd");
    	$calendarDayCatalog = CalendarDayCatalog::getInstance();
    	$calendarDayObject = $calendarDayCatalog->getByidEmployeeAndDayDate($idEmployee, $dayDate);
    	if ($calendarDayObject->getEnabledDisabled()== 1)
    		$enableDisable = 2;
    	else
    		$enableDisable = 1;
    	$calendarDay = $calendarDayCatalog->getById($calendarDayObject->getIdDay());
    	$calendarDay->setIdEmployee($calendarDayObject->getIdEmployee());
	    $calendarDay->setDayDate($calendarDayObject->getDayDate());
	    $calendarDay->setEnabledDisabled($enableDisable);
	    $calendarDayCatalog->update($calendarDay);
    	$this->noRender();
    	$dates_enable=CalendarDayManager::getInstance()->getEnableDays($idEmployee);
		$dates_disable=CalendarDayManager::getInstance()->getDisableDays($idEmployee);
		die(json_encode(array("noHolidays"=>$dates_enable,"holidays"=>$dates_disable)));
    }       
    
}
