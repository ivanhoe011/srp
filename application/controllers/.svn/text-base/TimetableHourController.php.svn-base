<?php
/**
 * SRP
 *
 * SRP INELECTRA
 *
 * @category   Application
 * @package    Application_Controllers
 * @copyright  Copyright (c) 2010 PCSMEXICO
 * @author     <arturo>, $LastChangedBy$
 * @version    1.0.2 SVN: $Id$
 */

/**
 * Dependences
 */
require_once "lib/controller/CrudController.php";
require_once "lib/managers/TimetableManager.php";
require_once "application/models/catalogs/TimetableHourCatalog.php";

/**
 * TimetableHourController (CRUD for the TimetableHour Objects)
 *
 * @category   Project
 * @package    Project_Controllers
 * @copyright  Copyright (c) 2010 PCSMEXICO 
 * @copyright  This File has been proudly generated by Bender (http://code.google.com/p/bender-modeler/). <chentepixtol> <zetta>
 * @author     <zetta> & <chentepixtol>
 * @version    1.0.2 SVN: $Revision$
 */
class TimetableHourController extends CrudController
{
    
    /**
     * alias for the list action
     */
    public function indexAction()
    {
        $this->_forward('list');
    }
    
    /**
     * List the objects TimetableHour actives
     */
    public function listAction()
    {
        $this->view->timetableHours = TimetableHourCatalog::getInstance()->getActives();
        $this->setTitle('List the TimetableHour');
    }
    
    /**
     * delete an TimetableHour
     */
    public function deleteAction()
    {
        $timetableHourCatalog = TimetableHourCatalog::getInstance();
        $idTimetableHour = $this->getRequest()->getParam('idTimetableHour');
        $timetableHour = $timetableHourCatalog->getById($idTimetableHour);
        $timetableHourCatalog->deactivate($timetableHour);
        $this->setFlash('ok','Successfully removed the TimetableHour');
        $this->_redirect('timetable-hour/list');
    }
    
    /**
     * Form for edit an TimetableHour
     */
    public function editAction()
    {
        $timetableHourCatalog = TimetableHourCatalog::getInstance();
        $idTimetableHour = $this->getRequest()->getParam('idTimetableHour');
        $timetableHour = $timetableHourCatalog->getById($idTimetableHour);
        $post = array(
            'id_timetable_hour' => $timetableHour->getIdTimetableHour(),
            'id_timetable' => $timetableHour->getIdTimetable(),
            'id_project_task' => $timetableHour->getIdProjectTask(),
            'id_project' => $timetableHour->getIdProject(),
            'record_date' => $timetableHour->getRecordDate(),
            'description' => $timetableHour->getDescription(),
            'hours' => $timetableHour->getHours(),
            'date_created' => $timetableHour->getDateCreated(),
            'timestamp' => $timetableHour->getTimestamp(),
            'status' => $timetableHour->getStatus(),
            'type' => $timetableHour->getType(),
        );
        $this->view->post = $post;
        $this->setTitle('Edit TimetableHour');
    }
    
    /**
     * Create an TimetableHour
     */
    public function createAction()
    {   
        $timetableHourCatalog = TimetableHourCatalog::getInstance();
        $idTimetable = utf8_decode($this->getRequest()->getParam('id_timetable'));
        $idProjectTask = utf8_decode($this->getRequest()->getParam('id_project_task'));
        $idProject = utf8_decode($this->getRequest()->getParam('id_project'));
        $recordDate = utf8_decode($this->getRequest()->getParam('record_date'));
        $description = utf8_decode($this->getRequest()->getParam('description'));
        $hours = utf8_decode($this->getRequest()->getParam('hours'));
        $dateCreated = utf8_decode($this->getRequest()->getParam('date_created'));
        $timestamp = utf8_decode($this->getRequest()->getParam('timestamp'));
        $status = utf8_decode($this->getRequest()->getParam('status'));
        $type = utf8_decode($this->getRequest()->getParam('type'));
        $timetableHour = TimetableHourFactory::create($idTimetable, $idProjectTask, $idProject, $recordDate, $description, $hours, $dateCreated, $timestamp, $status, $type);
        $timetableHourCatalog->create($timetableHour);  
        $this->view->setTpl('_row');
        $this->view->setLayoutFile(false);
        $this->view->timetableHour = $timetableHour;
    }
    
    /**
     * Update an TimetableHour
     */
    public function updateAction()
    {
        $timetableHourCatalog = TimetableHourCatalog::getInstance();
        $idTimetableHour = $this->getRequest()->getParam('idTimetableHour');
        $timetableHour = $timetableHourCatalog->getById($idTimetableHour);
        $timetableHour->setIdTimetable($this->getRequest()->getParam('id_timetable'));
        $timetableHour->setIdProjectTask($this->getRequest()->getParam('id_project_task'));
        $timetableHour->setIdProject($this->getRequest()->getParam('id_project'));
        $timetableHour->setRecordDate($this->getRequest()->getParam('record_date'));
        $timetableHour->setDescription($this->getRequest()->getParam('description'));
        $timetableHour->setHours($this->getRequest()->getParam('hours'));
        $timetableHour->setDateCreated($this->getRequest()->getParam('date_created'));
        $timetableHour->setTimestamp($this->getRequest()->getParam('timestamp'));
        $timetableHour->setStatus($this->getRequest()->getParam('status'));
        $timetableHour->setType($this->getRequest()->getParam('type'));
        $timetableHourCatalog->update($timetableHour);
        $this->setFlash('ok','Successfully edited the TimetableHour');
        $this->_redirect('timetable-hour/list');
    }

    public function createHourAction(){
        $this->noRender();
        echo TimetableManager::getInstance()->createTimetableHour($this->getRequest()->getParams(), $this->getUser()->getBeanEmployee());
    }

    public function updateHourAction(){
        $this->noRender();
        echo TimetableManager::getInstance()->updateTimetableHour($this->getRequest()->getParams(), $this->getUser()->getBeanEmployee());
    }

    public function releaseHourAction(){
        $this->noRender();
        echo TimetableHourCatalog::getInstance()->releaseHour($this->getRequest()->getParam("id"));
    }

    public function releaseTimetableAction(){
        $this->noRender();
        echo TimetableManager::getInstance()->releaseTimetable(json_decode($this->getRequest()->getParam("hours"),true));
    }

    public function getHoursAction(){
        $this->noRender();
        TimetableHourCatalog::getInstance()->getHours($this->getUser()->getBeanEmployee()->getIdEmployee());
    }

    public function deleteHourAction(){
        $this->noRender();
        $idTimetableHour=$this->getRequest()->getParam("id_timetable_hour");
        $ok=TimetableHourCatalog::getInstance()->deleteById($idTimetableHour);
        if($ok>0)
            echo json_encode (array("ok"=>"ok","id"=>$idTimetableHour));
        else
            echo json_encode (array("not_ok"=>"ok","id"=>$idTimetableHour));
    }
    
}
