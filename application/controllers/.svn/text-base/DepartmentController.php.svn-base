<?php

/**
 * SRP
 *
 * SRP INELECTRA
 *
 * @category   Application
 * @package    Application_Controllers
 * @copyright  Copyright (c) 2010 PCSMEXICO
 * @author     <arturo>, $LastChangedBy$
 * @version    1.0.2 SVN: $Id$
 */
/**
 * Dependences
 */
require_once "lib/controller/CrudController.php";
require_once "lib/utils/department_load/DepartmentUtilities.php";
require_once "lib/managers/DepartmentManager.php";
require_once "application/models/catalogs/DepartmentCatalog.php";
define("DEP_DIR", "./data/load/department/");

/**
 * DepartmentController (CRUD for the Department Objects)
 *
 * @category   Project
 * @package    Project_Controllers
 * @copyright  Copyright (c) 2010 PCSMEXICO 
 * @copyright  This File has been proudly generated by Bender (http://code.google.com/p/bender-modeler/). <chentepixtol> <zetta>
 * @author     <zetta> & <chentepixtol>
 * @version    1.0.2 SVN: $Revision$
 */
class DepartmentController extends CrudController {

    /**
     * alias for the list action
     */
    public function indexAction() {
        $this->_forward('list');
    }

    /**
     * List the objects Department actives
     */
    public function listAction() {
        $this->view->departments = DepartmentCatalog::getInstance()->getActives();
        $this->setTitle('List the Department');
    }

    /**
     * delete an Department
     */
    public function deleteAction() {
        $departmentCatalog = DepartmentCatalog::getInstance();
        $idDepartment = $this->getRequest()->getParam('idDepartment');
        $department = $departmentCatalog->getById($idDepartment);
        $departmentCatalog->deactivate($department);
        $this->setFlash('ok', 'Successfully removed the Department');
        $this->_redirect('department/list');
    }

    /**
     * Form for edit an Department
     */
    public function editAction() {
        $departmentCatalog = DepartmentCatalog::getInstance();
        $idDepartment = $this->getRequest()->getParam('idDepartment');
        $department = $departmentCatalog->getById($idDepartment);
        $post = array(
            'id_department' => $department->getIdDepartment(),
            'id_department_head' => $department->getIdDepartmentHead(),
            'department_code' => $department->getDepartmentCode(),
            'department_name' => $department->getDepartmentName(),
            'status' => $department->getStatus(),
        );
        $this->view->post = $post;
        $this->setTitle('Edit Department');
    }

    /**
     * Create an Department
     */
    public function createAction() {
        $departmentCatalog = DepartmentCatalog::getInstance();
        $idDepartmentHead = utf8_decode($this->getRequest()->getParam('id_department_head'));
        $departmentCode = utf8_decode($this->getRequest()->getParam('department_code'));
        $departmentName = utf8_decode($this->getRequest()->getParam('department_name'));
        $status = utf8_decode($this->getRequest()->getParam('status'));
        $department = DepartmentFactory::create($idDepartmentHead, $departmentCode, $departmentName, $status);
        $departmentCatalog->create($department);
        $this->view->setTpl('_row');
        $this->view->setLayoutFile(false);
        $this->view->department = $department;
    }

    /**
     * Update an Department
     */
    public function updateAction() {
        $departmentCatalog = DepartmentCatalog::getInstance();
        $idDepartment = $this->getRequest()->getParam('idDepartment');
        $department = $departmentCatalog->getById($idDepartment);
        $department->setIdDepartmentHead($this->getRequest()->getParam('id_department_head'));
        $department->setDepartmentCode($this->getRequest()->getParam('department_code'));
        $department->setDepartmentName($this->getRequest()->getParam('department_name'));
        $department->setStatus($this->getRequest()->getParam('status'));
        $departmentCatalog->update($department);
        $this->setFlash('ok', 'Successfully edited the Department');
        $this->_redirect('department/list');
    }

    public function uploadAction() {
        try {
            $row = 0;
            $archives = glob(DEP_DIR . "*.csv");
            if (count($archives) > 1)
                $this->view->warning_files = "Se encontró mas de un archivo csv";
            if (($handle = fopen($archives[0], "r")) !== FALSE) {
                while (($data = fgetcsv($handle, 1000, "|")) !== FALSE) {
                    if ($row == 0)
                        $titles = $data;
                    else
                        foreach ($data as $k => $v)
                            $data_fields[$row][$titles[$k]] = $v;
                    $row++;
                }
                fclose($handle);
                //print_r($data_fields);
                //die();
                DepartmentManager::getInstance()->check_departments($data_fields);
                $digested_file = DepartmentUtilities::getInstance()->validateRowFields($data_fields);
                //print_r($digested_file);
                foreach ($digested_file["reported_rows"] as $key => $reported_row) {
                    unset($reported_row["ERROR"]);
                    $csv_lines[$key] = implode("|", $reported_row);
                }
                $result = DepartmentManager::getInstance()->upload_create($digested_file["ok_rows"]);
                $this->view->reported_rows = $digested_file["reported_rows"];
                $this->view->reported_rows_count = count($digested_file["reported_rows"]);
                $this->view->ok_rows = $digested_file["ok_rows"];
                $this->view->ok_rows_count = count($digested_file["ok_rows"]);
                $this->view->inserted_rows = $result["inserted_rows"];
                $this->view->db_errors = $result["db_errors"];
                $this->view->db_errors_count = count($result["db_errors"]);
                $this->view->csv_lines = $csv_lines;
                $this->view->rows_count = $row - 1;
                //unlink($archives[0]);
            }
        } catch (Exception $e) {
            print_r($archives);
            echo $e->getMessage();
            $this->view->warning_files = "No hay ningun archivo para carga de datos";
        }
    }

}
